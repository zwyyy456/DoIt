<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vscode on My New Hugo Site</title>
    <link>http://localhost:1313/tags/vscode/</link>
    <description>Recent content in Vscode on My New Hugo Site</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 25 May 2024 10:33:04 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/vscode/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>VSCode 工作空间（Workspace）指北</title>
      <link>http://localhost:1313/posts/blog/vscode-workspace.zh/</link>
      <pubDate>Sat, 25 May 2024 10:33:04 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/vscode-workspace.zh/</guid>
      <description>为什么要用工作区 VSCode 作为一个轻量的编辑器，对比 IDE 很多功能并非集成。如果想打造成一个 IDE，那么就需要安装很多扩展，然而扩展越多，管理起来也越发困难，VSCode 也就越发“笨重”，例如，当我进行 cpp 开发的时候，python 与 go 的相关插件就不需要了，然而其默认也是开启的，我们当然可以手动关闭，有需要的时候再打开。然而，随着这样的扩展越来越多，手动控制扩展的开启与关闭就变得非常麻烦。&#xA;我认为 VSCode 的工作区（Work Space）诞生的一大重要原因就是扩展的管理。事实上，当我们打开 VSCode 的时候，其实就位于默认的工作区中。&#xA;工作区的创建 假设我只会在 ~/code/blog/zwyb_blog 目录下用 VSCode 写博客，那么我用 VSCode 打开 ~/code/python 目录，我就可以点击 File -&amp;gt; Save Workspace as，保存为 blog.code-workspace。&#xA;目前，其内容如下：&#xA;{ &amp;#34;folders&amp;#34;: [ { &amp;#34;path&amp;#34;: &amp;#34;.&amp;#34; }, ], &amp;#34;settings&amp;#34;: {} } 可以看到，内容分为了 folders 与 settings 两大类，folders 表示处于该工作空间的文件夹所在目录，我们可以点击 File -&amp;gt; Add Folder to Workspace 来添加其他项目文件夹目录到该工作区，例如我添加了 ~/code/blog/papermod 目录，添加后内容修改为如下：&#xA;{ &amp;#34;folders&amp;#34;: [ { &amp;#34;path&amp;#34;: &amp;#34;.&amp;#34; }, { &amp;#34;path&amp;#34;: &amp;#34;.</description>
    </item>
    <item>
      <title>vscode使用 vscode-neovim 插件</title>
      <link>http://localhost:1313/posts/blog/vscode-neovim.zh/</link>
      <pubDate>Wed, 08 Nov 2023 16:52:21 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/vscode-neovim.zh/</guid>
      <description>启用插件 Win11 插件设置：Settings-user页面，Neovim Executable Paths: Win32内容设置为C:\Users\zwyyy\scoop\apps\neovim\current\bin\nvim.exe，Neovim Init Vim Paths: Win32内容无需设置。&#xA;WSL 插件设置：Settings-Remote [WSL:Debian]页面，Neovim Executable Paths: Linux内容设置为/usr/bin/nvim，Neovim Init Vim Paths: Linux内容无需设置。&#xA;MacOS 插件设置：Settings-user页面，Neovim Executable Paths: Darwin 内容设置为 /opt/homebrew/bin/nvim，Neovim Init Vim Paths: Darwin 内容无需设置。&#xA;key bindings 中查找ctrl+c，删除与neovim有关的两项，否则会导致插入模式下无法使用ctrl+c复制（我没有选择删除）。&#xA;设置 jk 为 esc 已于 1.11.1 版本废弃 编辑 keybings.json，添加&#xA;{ &amp;#34;command&amp;#34;: &amp;#34;vscode-neovim.compositeEscape1&amp;#34;, &amp;#34;key&amp;#34;: &amp;#34;j&amp;#34;, &amp;#34;when&amp;#34;: &amp;#34;neovim.mode == insert &amp;amp;&amp;amp; editorTextFocus&amp;#34;, &amp;#34;args&amp;#34;: &amp;#34;j&amp;#34; }, { &amp;#34;command&amp;#34;: &amp;#34;vscode-neovim.compositeEscape2&amp;#34;, &amp;#34;key&amp;#34;: &amp;#34;k&amp;#34;, &amp;#34;when&amp;#34;: &amp;#34;neovim.mode == insert &amp;amp;&amp;amp; editorTextFocus&amp;#34;, &amp;#34;args&amp;#34;: &amp;#34;k&amp;#34; } 使用 gc 作为注释快捷键 已废弃 原先解决方案是在 neovim 的配置目录的 lua/vscode/config 目录下新建 keymaps.</description>
    </item>
    <item>
      <title>vscode 使用 clangd</title>
      <link>http://localhost:1313/posts/blog/clangd_vscode.zh/</link>
      <pubDate>Thu, 23 Mar 2023 15:56:21 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/clangd_vscode.zh/</guid>
      <description>环境要求 使用 wsl 或者 macOS，Linux 下同理，暂时不考虑纯 winodws。&#xA;以 wsl 为例，执行以下指令&#xA;sudo apt install clang clangd lldb cmake macOS如果安装过xcode工具包，就附带了Apple Clang编译器，否则执行brew install llvm，然后输入以下指令添加环境变量&#xA;echo &amp;#39;export PATH=&amp;#34;/opt/homebrew/opt/llvm/bin:$PATH&amp;#34;&amp;#39; &amp;gt;&amp;gt; ~/.zshrc echo &amp;#39;export LDFLAGS=&amp;#34;-L/opt/homebrew/opt/llvm/lib&amp;#34;&amp;#39; &amp;gt;&amp;gt; ~/.zshrc echo &amp;#39;export CPPFLAGS=&amp;#34;-I/opt/homebrew/opt/llvm/include&amp;#34;&amp;#39; &amp;gt;&amp;gt; ~/.zshrc 以上是针对默认 shell 为 zsh 的配置，如果你像我一样，mac 的默认 shell 是 fish，那么需要修改 ~/.config/fish/config.fish，添加环境变量，添加下方法为追加以下内容：&#xA;set -gx PATH /opt/homebrew/opt/llvm/bin $PATH set -gx LDFLAGS -L/opt/homebrew/opt/llvm/lib set -gx CPPFLAGS -I/opt/homebrew/opt/llvm/include 然后在vscode中安装 CodeLLDB、clangd、Cmake、Xmake、Cmake Tools 这几个插件，其中除了Xmake之外都必须安装。&#xA;开始 随便找一个空文件打开，然后Ctrl+shift+p（macOS下为cmd+shift_p）打开下拉菜单，搜索camke，选择Quick start： 之后给项目起个名字，如webserver，输出类型选Executable而不是lib，Kit选择Clangxxxxx-gnu。&#xA;macOS 必须选择 homebrew 安装的 clang kit，否则会出现无法找到 ninja 的问题。</description>
    </item>
    <item>
      <title>Vscdoe 通过cookie 登陆美区 LeetCode</title>
      <link>http://localhost:1313/posts/blog/vscode-leetcode-cookie.zh/</link>
      <pubDate>Tue, 27 Sep 2022 22:47:15 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/vscode-leetcode-cookie.zh/</guid>
      <description>安装插件 vscode 安装leetcode插件。&#xA;使用cookie登陆 如果选择使用github登陆leetcode.com，似乎会有无法提交和测试的bug，而用cookie登陆就没有这个问题&#xA;使用edge获取cookie 使用Firefox获取的cookie有问题，无法正常登陆&#xA;右键，选择检查 选择网络 打开leetcode的problem页面 下滑找到cookie那一栏，复制cookie </description>
    </item>
  </channel>
</rss>
