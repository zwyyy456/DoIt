<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on My New Hugo Site</title>
    <link>http://localhost:1313/tags/git/</link>
    <description>Recent content in Git on My New Hugo Site</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 18 Jun 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>计算机教育缺失的一课：Git</title>
      <link>http://localhost:1313/posts/tech/missing-semester-git.zh/</link>
      <pubDate>Sun, 16 Jun 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/tech/missing-semester-git.zh/</guid>
      <description>版本控制系统介绍 版本控制系统 (VCSs) 是一类用于追踪源代码（或其他文件、文件夹）改动的工具。顾名思义，这些工具可以帮助我们管理代码的修改历史；不仅如此，它还可以让协作编码变得更方便。VCS 通过一系列的快照将某个文件夹及其内容保存了起来，每个快照都包含了文件或文件夹的完整状态。同时它还维护了快照创建者的信息以及每个快照的相关信息等等。&#xA;版本控制系统的事实标准是 Git。&#xA;Git 的许多操作或者说命令看起来非常奇怪，但 Git 的底层设计与思想非常优雅，因此，从 Git 的数据模型开始学习 Git，自底向上，最后再学习 Git 的接口或者说命令，会比较容易让人理解 Git 的命令以及 Git 是如何操作数据模型的。&#xA;Git 的数据模型 Git 将项目的根目录（顶层目录）中的文件夹与文件作为集合，通过这一系列集合的快照来管理项目历史记录。在 Git 的术语中，文件被称为 Blob（数据对象），即一组数据，目录则是被称为 tree。tree 的名称与另一个 tree 又或者文件相对应。&#xA;把目录视为 tree，那么子目录就是 subtree，目录下的文件就是 tree 的子节点。&#xA;一棵 tree 看起来可能是这样的：&#xA;&amp;lt;root&amp;gt; (tree) | +- foo (tree) | | | + bar.txt (blob, contents = &amp;#34;hello world&amp;#34;) | +- baz.txt (blob, contents = &amp;#34;git is wonderful&amp;#34;) Git 历史记录建模：关联快照 Git 中的 object 可以分为 blob、tree、commit 三类，每次我们执行 git commit 时，都会创建一个 commit 对象，又或者说对当前的 work directory 的 snapshot。</description>
    </item>
    <item>
      <title>Mac 与 win 之间的云同步处理</title>
      <link>http://localhost:1313/posts/blog/cloud-sync.zh/</link>
      <pubDate>Mon, 15 Jan 2024 16:02:28 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/cloud-sync.zh/</guid>
      <description>iCloud iCloud 是 Mac 的默认云盘，Apple 为 Mac 提供了一定程度上的 iCloud 集成，在 Apple ID -&amp;gt; iCloud -&amp;gt; iCloud 云盘 中，可以选择让“桌面与文稿文件夹”也使用 iCloud 云盘，此时，你原先的 /Users/Documents 和 /Users/Desktop 会被替换为 iCloud/Documents 中的 文稿 - zwy - mbp14 以及 icloud/Desktop 中的 桌面 - zwy - mpb14 目录，同时 iCloud 中的 文稿 目录与 桌面 目录会被分别作为 Mac 的 /Users/Documents 与 /Users/Desktop 目录，推测是通过符号链接来实现的？&#xA;此后所有的对 /Users/Docuements 与 /Users/Desktop 的修改都会反映到 iCloud 中。&#xA;要注意一点，推荐关闭 iCloud 的 优化 Mac 储存空间 功能，否则当你的 Mac 存储空间不足的时候，/Users/Documents 与 /Users/Desktop 目录中的内容会变成仅保存在 iCloud 云端，而本地没有保存内容，这会导致在这两个目录中执行 git 与 cd 等命令非常卡顿。</description>
    </item>
    <item>
      <title>Git 如何避免 &#39;warning: LF will be replaced by CRLF&#39;</title>
      <link>http://localhost:1313/posts/blog/git-crlf-lf.zh/</link>
      <pubDate>Mon, 18 Dec 2023 22:02:46 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/git-crlf-lf.zh/</guid>
      <description>问题描述 前面提到，我会使用 Filen 来同步文件，例如当我在 macOS 上创建了 .md 文件而忘记 push 到 GitHub 时，回到宿舍，打开我 Windows 系统的 Acer 笔记本（后续以 Acer 指代该笔记本）时，Filen 会自动将 .md 文件同步到 Acer，然后当我在 Acer 上完成对该 .md 的编辑并 commit 时，就会提示如下内容：&#xA;CR 表示 \r，LF 表示 \n&#xA;warning: LF will be replaced by CRLF in content/posts/blog/n1-plex-music.zh.md. The file will have its original line endings in your working directory 我们在安装 Git 时，默认 core.autocrlf = true，即 Git 会认为，工作区的文件都应该用 \r\n 来换行，如果工作区因为新增（在这个情境下就是因为 Filen 把文件同步到了 Acer）或编辑出现了 \n 换行符的文件，git add 这些文件时，发现准备提交的文件是 \n 作为换行符，就会出现这个警告，并提示哪些文件是 \n 换行的，但是 Git 不会对工作区这些文件做换行符的转换）。</description>
    </item>
    <item>
      <title>git 使用技巧</title>
      <link>http://localhost:1313/posts/tech/git_tutorial.zh/</link>
      <pubDate>Wed, 22 Mar 2023 09:56:48 +0800</pubDate>
      <guid>http://localhost:1313/posts/tech/git_tutorial.zh/</guid>
      <description>设置默认编辑器为 vim git config --global core.editor vim 问题fatal: in unpopulated submodule &#39;xxx&#39;的解决 出现这个问题的原因clone的别人的项目之后，删除项目里的.git文件就直接添加到了自己的版本控制里面，解决方案，执行 git rm --cached . -rf，再添加文件和提交。&#xA;&amp;ldquo;merge conflict&amp;rdquo; 解决 对于纯文本文件的冲突解决，可以参考该文章，没什么太多好说的。&#xA;对于二进制文件，编辑二进制文件来解决冲突是不现实的，要么选择对方的修改，要么选择自己的修改，可以使用git checkout的--theirs或者--ours选项：&#xA;git pull git checkout --theirs YOUR_BINARY_FILE // git checkout --ours YOUR_BINARY_FILE git add YOUR_BINARY_FILE git commit -m &amp;#39;merged with the remote repos.&amp;#39; git push </description>
    </item>
    <item>
      <title>Math_test</title>
      <link>http://localhost:1313/posts/tech/math_test/</link>
      <pubDate>Mon, 26 Sep 2022 11:40:26 +0800</pubDate>
      <guid>http://localhost:1313/posts/tech/math_test/</guid>
      <description>math_test 中文测试 $a_b$ $$a_b + c_d$$&#xA;aaa</description>
    </item>
  </channel>
</rss>
