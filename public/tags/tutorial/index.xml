<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial on My New Hugo Site</title>
    <link>http://localhost:1313/tags/tutorial/</link>
    <description>Recent content in Tutorial on My New Hugo Site</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 13 Apr 2023 13:42:31 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/tutorial/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cmake 基础教程</title>
      <link>http://localhost:1313/posts/tech/cmake_tutorial.zh/</link>
      <pubDate>Thu, 13 Apr 2023 13:42:31 +0800</pubDate>
      <guid>http://localhost:1313/posts/tech/cmake_tutorial.zh/</guid>
      <description>介绍 CMake是个一个开源的跨平台自动化建构系统，用来管理软件建置的程序，并不依赖于某特定编译器，并可支持多层目录、多个应用程序与多个库。 它用配置文件控制建构过程（build process）的方式和Unix的make相似，只是CMake的配置文件取名为CMakeLists.txt。CMake并不直接建构出最终的软件，而是产生标准的建构档（如Unix的Makefile或Windows Visual C++的projects/workspaces），然后再依一般的建构方式使用。&#xA;CmakeLists.txt 一个简单的CmakeLists.txt示例如下:&#xA;# 指定最小 CMake 版本要求 cmake_minimum_required(VERSION 3.9) # 设置项目名称 project(answer) #[[ 添加可执行文件 target，类似于原来 Makefile 的： answer: main.o answer.o main.o: main.cpp answer.hpp answer.o: answer.cpp answer.hpp CMake 会自动找到依赖的头文件，因此不需要特别指定， 当头文件修改的时候，会重新编译依赖它的目标文件。 #]] add_executable(answer main.cpp answer.cpp) #[[ 使用如下命令构建本项目： cmake -B build # 生成构建目录 cmake --build build # 执行构建 ./build/answer # 运行 answer 程序 #]] 其中cmake -B build命令中的-B参数是可选的，生成的文件会放到build文件夹中（没有该文件夹则会自动创建，最好原先没有）。&#xA;cmake --build build是执行构建，生成可执行文件，build指的是上一步-B参数指定的文件夹。&#xA;分离库文件情形下的CMakeLists.txt cmake_minimum_required(VERSION 3.9) project(answer) # 添加 libanswer 库目标，STATIC 指定为静态库 add_library(libanswer STATIC answer.</description>
    </item>
  </channel>
</rss>
