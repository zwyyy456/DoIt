<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tips on My New Hugo Site</title>
    <link>http://localhost:1313/tags/tips/</link>
    <description>Recent content in Tips on My New Hugo Site</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 18 Aug 2024 09:51:38 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/tips/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>基于 Hugo 搭建个人博客</title>
      <link>http://localhost:1313/posts/blog/build-site-with-papermod.zh/</link>
      <pubDate>Sun, 11 Aug 2024 09:51:38 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/build-site-with-papermod.zh/</guid>
      <description>简介与安装 Hugo 是一个用 Go 编写的静态网站生成器，可以轻松生成个人博客。&#xA;Hugo 安装起来也非常方便，以下是 Hugo 的安装命令：&#xA;brew install hugo # mac sudo apt install hugo # Debian scoop install hugo # windows Windows 推荐使用 scoop 包管理器，非常好用&#xA;安装好 Hugo 后，执行 hugo new site blog 就会在当前目录下创建名为 blog 的目录，Hugo 后续将基于该目录中的内容来创建网站。&#xA;主题配置 这里介绍了三个个人比较喜欢的 Hugo 主题的配置方案。读者可以自选其一，我是部署了三个博客网站，当然只有一个能被搜索引擎检索到。&#xA;PaperMod 安装主题 在 blog 目录下，执行以下命令：&#xA;git submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod git submodule update --init --recursive # needed when you reclone your repo (submodules may not get cloned automatically) 主题就被安装在了 blog/themes/PaperMod 目录下，该目录下就是 PaperMod 主题的源码。</description>
    </item>
    <item>
      <title>Neovim 快捷键配置</title>
      <link>http://localhost:1313/posts/blog/nvim_keymap.zh/</link>
      <pubDate>Sun, 05 Nov 2023 17:05:51 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/nvim_keymap.zh/</guid>
      <description>Vim 快捷键 这一部分是 Vim 的默认快捷键，例如 gg、dd 等。&#xA;normal 模式快捷键 按键 操作 按键 操作 i 切换到插入模式 : 切换到命令模式 h 左移一个字符 j 下移一个字符 k 上移一个字符 l 右移一个字符 0 移至行首 $ 移至行尾 ^ 移至本行第一个非空字符 w 向右移动一个单词 W 向右移动一个单词（以空格分隔） 2w 向右移动两个单词 2W 向右移动两个单词（以空格分隔） b 向左移动一个单词 B 向左移动一个单词（以空格分隔） 2b 向左移动 2 个单词 2B 向左移动 2 个单词（以空格分隔） G 移至文档末尾 gg 移至文档首行 a 光标后插入 A 移至行末插入 o 光标下插入一行 O 光标上插入一行 x 删除光标处字符 dw 删除一个词 d0 删至行首 d$ 删至行尾 d) 删至句末 dgg 删至文件开头 dG 删至文件末尾 dd 删除该行 2dd 删除两行 r 替换当前字符 R 切换到 REPLACE 模式 u 撤回操作 &amp;lt;C-r&amp;gt; 重做撤回的操作 yy 复制当前行 p 在当前行之后粘贴内容 P 在当前行之前粘贴内容 v 打开 VISUAL 模式菜单 V 切换到逐行选择的 VISUAL 模式 / 向后搜索 ?</description>
    </item>
    <item>
      <title>1074. Number of Submatrices That Sum to Target (Hard)</title>
      <link>http://localhost:1313/posts/leet/1074.number-of-submatrices-that-sum-to-target/</link>
      <pubDate>Fri, 13 Oct 2023 11:28:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/leet/1074.number-of-submatrices-that-sum-to-target/</guid>
      <description>Description 1074. Number of Submatrices That Sum to Target (Hard)&#xA;Given a matrix and a target, return the number of non-empty submatrices that sum to target.&#xA;A submatrix x1, y1, x2, y2 is the set of all cells matrix[x][y] with x1 &amp;lt;= x &amp;lt;= x2 and y1 &amp;lt;= y &amp;lt;= y2.&#xA;Two submatrices (x1, y1, x2, y2) and (x1&#39;, y1&#39;, x2&#39;, y2&#39;) are different if they have some coordinate that is different: for example, if x1 !</description>
    </item>
    <item>
      <title>1074. 元素和为目标值的子矩阵数量 (Hard)</title>
      <link>http://localhost:1313/posts/leet/1074.number-of-submatrices-that-sum-to-target.zh/</link>
      <pubDate>Fri, 13 Oct 2023 11:27:57 +0800</pubDate>
      <guid>http://localhost:1313/posts/leet/1074.number-of-submatrices-that-sum-to-target.zh/</guid>
      <description>问题描述 1074. 元素和为目标值的子矩阵数量 (Hard)&#xA;给出矩阵 matrix 和目标值 target，返回元素总和等于目标值的非空子矩阵的数量。&#xA;子矩阵 x1, y1, x2, y2 是满足 x1 &amp;lt;= x &amp;lt;= x2 且 y1 &amp;lt;= y &amp;lt;= y2 的所有单元 matrix[x][y] 的集合。&#xA;如果 (x1, y1, x2, y2) 和 (x1&#39;, y1&#39;, x2&#39;, y2&#39;) 两个子矩阵中部分坐标不同（如： x1 != x1&#39;），那么 这两个子矩阵也不同。&#xA;示例 1：&#xA;输入：matrix = [[0,1,0],[1,1,1],[0,1,0]], target = 0 输出：4 解释：四个只含 0 的 1x1 子矩阵。 示例 2：&#xA;输入：matrix = [[1,-1],[-1,1]], target = 0 输出：5 解释：两个 1x2 子矩阵，加上两个 2x1 子矩阵，再加上一个 2x2 子矩阵。 示例 3：</description>
    </item>
    <item>
      <title>解决远程主机的默认 shell 为 fish 时，vscode remote 无法连接的问题</title>
      <link>http://localhost:1313/posts/blog/fish-vscode-remote.zh/</link>
      <pubDate>Sat, 08 Jul 2023 11:30:15 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/fish-vscode-remote.zh/</guid>
      <description>问题描述 我主要用的 shell 就是 fish，主打一个开箱即用，虽然也配置过 zsh，但是感觉配置好的 zsh 在易用性上也就是 fish 的水平。&#xA;此前，一直以来默认的 shell 都是 bash，ssh 或者 vscode remote 远程连接上去之后，再输入 fish 来进行手动切换，后来嫌麻烦，就执行 chsh -s /usr/bin/fish 将默认 shell 切换到了 fish，然后 vscode remote 就连接不上了。&#xA;出现该问题的原因见该 issue 里的讨论&#xA;we still have a bug connecting to remotes with fish shells as their default shell. Using the remotePlatform setting we added a work around to make the connection work. It&amp;rsquo;s not ideal but it works. The bug specifically has to do with what seems that Fish shells don&amp;rsquo;t let us pipe in scripts after connection unless we connect with a command like ssh your_host bash.</description>
    </item>
    <item>
      <title>通过 frp 使用 ssh 连接内网服务器</title>
      <link>http://localhost:1313/posts/blog/frp_ssh.zh/</link>
      <pubDate>Sun, 02 Apr 2023 17:41:53 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/frp_ssh.zh/</guid>
      <description>配置frp 安装frp ~/Prog目录下执行wget https://github.com/fatedier/frp/releases/download/v0.48.0/frp_0.48.0_linux_amd64.tar.gz下载压缩包，然后执行tar -zxvf file.path来解压，将解压生成的文件夹重命名为frp。&#xA;设置frpc.toml 修改frpc.toml文件为以下内容:&#xA;serverAddr = &amp;#34;nj1.mossfrp.cn&amp;#34; serverPort = 51960 token = &amp;#34;3nj117667696278235715&amp;#34; tls_enable = true use_encryption = true [[proxies]] name = &amp;#34;ssh&amp;#34; type = &amp;#34;tcp&amp;#34; localIP = &amp;#34;127.0.0.1&amp;#34; localPort = 22333 remotePort = 51962 [[vscode]] name = &amp;#34;vsc&amp;#34; type = &amp;#34;tcp&amp;#34; localIP = &amp;#34;127.0.0.1&amp;#34; localPort = 5433 remotePort = 51963 [[qbit]] name = &amp;#34;qbit&amp;#34; type = &amp;#34;tcp&amp;#34; localIP = &amp;#34;127.0.0.1&amp;#34; localPort = 28080 remotePort = 51968 [[qbit]] name = &amp;#34;iyuu&amp;#34; type = &amp;#34;tcp&amp;#34; localIP = &amp;#34;127.</description>
    </item>
    <item>
      <title>vscode 使用 clangd</title>
      <link>http://localhost:1313/posts/blog/clangd_vscode.zh/</link>
      <pubDate>Thu, 23 Mar 2023 15:56:21 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/clangd_vscode.zh/</guid>
      <description>环境要求 使用 wsl 或者 macOS，Linux 下同理，暂时不考虑纯 winodws。&#xA;以 wsl 为例，执行以下指令&#xA;sudo apt install clang clangd lldb cmake macOS如果安装过xcode工具包，就附带了Apple Clang编译器，否则执行brew install llvm，然后输入以下指令添加环境变量&#xA;echo &amp;#39;export PATH=&amp;#34;/opt/homebrew/opt/llvm/bin:$PATH&amp;#34;&amp;#39; &amp;gt;&amp;gt; ~/.zshrc echo &amp;#39;export LDFLAGS=&amp;#34;-L/opt/homebrew/opt/llvm/lib&amp;#34;&amp;#39; &amp;gt;&amp;gt; ~/.zshrc echo &amp;#39;export CPPFLAGS=&amp;#34;-I/opt/homebrew/opt/llvm/include&amp;#34;&amp;#39; &amp;gt;&amp;gt; ~/.zshrc 以上是针对默认 shell 为 zsh 的配置，如果你像我一样，mac 的默认 shell 是 fish，那么需要修改 ~/.config/fish/config.fish，添加环境变量，添加下方法为追加以下内容：&#xA;set -gx PATH /opt/homebrew/opt/llvm/bin $PATH set -gx LDFLAGS -L/opt/homebrew/opt/llvm/lib set -gx CPPFLAGS -I/opt/homebrew/opt/llvm/include 然后在vscode中安装 CodeLLDB、clangd、Cmake、Xmake、Cmake Tools 这几个插件，其中除了Xmake之外都必须安装。&#xA;开始 随便找一个空文件打开，然后Ctrl+shift+p（macOS下为cmd+shift_p）打开下拉菜单，搜索camke，选择Quick start： 之后给项目起个名字，如webserver，输出类型选Executable而不是lib，Kit选择Clangxxxxx-gnu。&#xA;macOS 必须选择 homebrew 安装的 clang kit，否则会出现无法找到 ninja 的问题。</description>
    </item>
    <item>
      <title>Zsh 的简单配置与使用</title>
      <link>http://localhost:1313/posts/blog/zsh_configuration.zh/</link>
      <pubDate>Thu, 23 Mar 2023 10:55:08 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/zsh_configuration.zh/</guid>
      <description>安装starship MacOS下执行curl -sS https://starship.rs/install.sh | sh即可，Linux下（如Debian），执行curl -sS https://starship.rs/install.sh | sh即可，然后执行starship preset pure-preset &amp;gt; ~/.config/starship.toml将预设主题设置为pure。&#xA;安装zinit插件 执行bash -c &amp;quot;$(curl --fail --show-error --silent --location https://raw.githubusercontent.com/zdharma-continuum/zinit/HEAD/scripts/install.sh)&amp;quot;以自动安装**zinit。&#xA;修改~/.zshrc为以下内容&#xA;## 启用starship eval &amp;#34;$(starship init zsh)&amp;#34; ### Added by Zinit&amp;#39;s installer if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then print -P &amp;#34;%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f&amp;#34; command mkdir -p &amp;#34;$HOME/.local/share/zinit&amp;#34; &amp;amp;&amp;amp; command chmod g-rwX &amp;#34;$HOME/.local/share/zinit&amp;#34; command git clone https://github.com/zdharma-continuum/zinit &amp;#34;$HOME/.local/share/zinit/zinit.git&amp;#34; &amp;amp;&amp;amp; \ print -P &amp;#34;%F{33} %F{34}Installation successful.</description>
    </item>
    <item>
      <title>git 使用技巧</title>
      <link>http://localhost:1313/posts/tech/git_tutorial.zh/</link>
      <pubDate>Wed, 22 Mar 2023 09:56:48 +0800</pubDate>
      <guid>http://localhost:1313/posts/tech/git_tutorial.zh/</guid>
      <description>设置默认编辑器为 vim git config --global core.editor vim 问题fatal: in unpopulated submodule &#39;xxx&#39;的解决 出现这个问题的原因clone的别人的项目之后，删除项目里的.git文件就直接添加到了自己的版本控制里面，解决方案，执行 git rm --cached . -rf，再添加文件和提交。&#xA;&amp;ldquo;merge conflict&amp;rdquo; 解决 对于纯文本文件的冲突解决，可以参考该文章，没什么太多好说的。&#xA;对于二进制文件，编辑二进制文件来解决冲突是不现实的，要么选择对方的修改，要么选择自己的修改，可以使用git checkout的--theirs或者--ours选项：&#xA;git pull git checkout --theirs YOUR_BINARY_FILE // git checkout --ours YOUR_BINARY_FILE git add YOUR_BINARY_FILE git commit -m &amp;#39;merged with the remote repos.&amp;#39; git push </description>
    </item>
    <item>
      <title>自行制作 nerd font</title>
      <link>http://localhost:1313/posts/blog/patch_my_own_nerd_font.zh/</link>
      <pubDate>Sat, 18 Mar 2023 15:06:08 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/patch_my_own_nerd_font.zh/</guid>
      <description>前言 Nerd Fonts 是一个使用大量字体图标来解决程序员在开发过程中缺少合适字体的问题的项目。它可以从流行的字体图标库中将大量外部字体引入待开发的项目中。&#xA;Nerd Fonts官方提供的Fura Mono字体将r修改成了Fira Mono的变种形式，个人不太喜欢，于是考虑自行打包。&#xA;同时，由于版权原因，未提供monaco字体的Nerd Fonts，因此也需要自行打包。&#xA;patch Fira Mono 参照Option 9: Patch Your Own Font,下载font patcher并解压，保证待打包字体位于解压之后的文件夹，然后执行&#xA;./font-patcher FiraMono-Regular.ttf -s -c --also-windows -ext otf patch Monaco 与Fira Mono类似，从此处下载Monaco字体，然后执行：&#xA;./font-patcher Monaco.ttf -s -c --also-windows -ext otf </description>
    </item>
    <item>
      <title>Neovim 的配置与使用</title>
      <link>http://localhost:1313/posts/blog/neovim_tutorial.zh/</link>
      <pubDate>Fri, 17 Mar 2023 15:08:52 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/neovim_tutorial.zh/</guid>
      <description>安装 LazyVim 参考 Lazyvim 的官方安装教程即可安装，要求系统已经安装好了 npm。&#xA;实际上就是 clone folke 的适用于 LazyVim 的初始 配置文件 到 Neovim 的配置文件所处的目录，Linux 和 macOS 都是 ~/.config，Windows 比较特殊，位于 ~/AppData/Local/。&#xA;由于我对初始配置文件做了一定的修改，因此我这里直接 clone 我自己的 配置文件&#xA;It is recommended to run :checkhealth after installation&#xA;值得注意的是，LazyVim 会安装 nvim-treesitter 插件，而 nvim-treesitter 插件会自动编译安装 C/C++ 等语言的解析器，而编译安装是需要 C/C++ 的运行环境的，对安装了 Command Line Tool 的 Mac 或者 Linux 而言，这一步一般不会存在问题，Windows 则是容易出现问题，我在重装 Windows 系统后尝试过只通过 scoop 安装了 llvm，尽管命令行中执行 clang --version 是有正常输出的，即 C/C++ 运行环境已经正常安装好了，但是 nvim-treesitter 始终无法正常编译解释器，不得已，我又通过 scoop install mingw 安装了 mingw（gcc），安装好 mingw 之后，解释器就能正常被编译安装了，此后执行 scoop uninstall mingw 卸载掉 mingw 也还是能正常使用。</description>
    </item>
    <item>
      <title>配置 Sublime Text4为 C&#43;&#43; 编辑器</title>
      <link>http://localhost:1313/posts/blog/sublime_cpp.zh/</link>
      <pubDate>Mon, 06 Feb 2023 09:06:25 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/sublime_cpp.zh/</guid>
      <description>概述 涉及以下插件的安装和配置Package Control Terminus LSP LSP-clangd clang-format LSP-pyright LSP-json&#xA;配置sublime 安装Package Control以进行包管理。&#xA;Terminus 安装Terminus以实现sublime text4内的terminal。&#xA;绑定快捷键：&#xA;[ { &amp;#34;keys&amp;#34;: [ &amp;#34;ctrl+shift+t&amp;#34; ], &amp;#34;command&amp;#34;: &amp;#34;terminus_open&amp;#34;, &amp;#34;args&amp;#34;: { // 打开时要执行的命令 // &amp;#34;cmd&amp;#34;: &amp;#34;fish&amp;#34;, &amp;#34;cwd&amp;#34;: &amp;#34;${file_path:${folder}}&amp;#34; } } ] 自定义在Terminus的终端中编译运行cpp文件:&#xA;在Tools-&amp;gt;Build System-&amp;gt;New Build System中新建编译文件，保存为CppTerminus.sublime-build，替换内容为:&#xA;{ // MacOS &amp;#34;cmd&amp;#34;: [ &amp;#34;zsh&amp;#34;, &amp;#34;-c&amp;#34;, &amp;#34;clang++ &amp;#39;${file}&amp;#39; -std=c++17 -stdlib=libc++ -o &amp;#39;${file_path}/../bin/${file_base_name}&amp;#39; &amp;amp;&amp;amp; ${file_path}/../bin/${file_base_name}&amp;#34; ], &amp;#34;file_regex&amp;#34;: &amp;#34;^(..{FNXX==XXFN}*):([0-9]+):?([0-9]+)?:? (.*)$&amp;#34;, &amp;#34;working_dir&amp;#34;: &amp;#34;${file_path}&amp;#34;, &amp;#34;encoding&amp;#34;: &amp;#34;utf-8&amp;#34;, &amp;#34;selector&amp;#34;: &amp;#34;source.c, source.c++&amp;#34;, &amp;#34;variants&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;Run In Terminus&amp;#34;, &amp;#34;target&amp;#34;: &amp;#34;terminus_exec&amp;#34;, &amp;#34;cancel&amp;#34;: &amp;#34;terminus_cancel_build&amp;#34;, &amp;#34;cmd&amp;#34;: [ &amp;#34;zsh&amp;#34;, &amp;#34;-c&amp;#34;, &amp;#34;clang++ &amp;#39;${file}&amp;#39; -std=c++17 -stdlib=libc++ -o &amp;#39;${file_path}/.</description>
    </item>
    <item>
      <title>N1 Armbian</title>
      <link>http://localhost:1313/posts/blog/n1-armbian/</link>
      <pubDate>Fri, 09 Dec 2022 12:33:40 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/n1-armbian/</guid>
      <description></description>
    </item>
    <item>
      <title>N1 安装 Armbian 简单教程</title>
      <link>http://localhost:1313/posts/blog/n1-armbian.zh/</link>
      <pubDate>Fri, 09 Dec 2022 12:33:32 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/n1-armbian.zh/</guid>
      <description>前置 这一步非必须,如果之前 N1 已经刷了 OpenWrt 或者 Armbian 那么就不需要了,否则最好还是先刷入 webpad 的官改 V2.2 固件 解压后利用双公头 usb 线和 usb-burning-tool 刷入到 N1 中。&#xA;具体步骤如下：&#xA;usb-burning-tool 导入 webpad 2.2 线刷包，勾选 擦除 flash，取消勾选 擦除 bootloader； 点击 开始 按钮； 3 秒内让 N1 通电，识别成功自动开始刷入； 完成后拔电再上电，让 N1 重启； 当 N1 能正常开机之后，用鼠标开启 N1 的开发者模式（类似安卓手机，连续点击系统版本号即可）。&#xA;制作镜像 选择Armbian_23.02.0_amlogic_s905d_bullseye_6.0.11_server_2022.12.08.img.gz，下载好之后，解压，利用rufus刷入u盘。&#xA;安装 由于盒子在刷入armbian前为安卓系统，已开启adb，mac的终端执行adb connect 192.168.123.193连接无线adb，192.168.123.193修改成N1的实际的ip地址，然后执行adb reboot update(这些过程最好都在N1外接显示器的环境下进行)，在显示器黑屏的瞬间将前一步的u盘插入到靠近hdmi的usb接口;&#xA;接下来显示器会跑一系列starting xxx的服务，直到最后让login的时候，应该是要先输入用户名root，再输入1234(默认密码)，然后输入两次重复的自定义密码(如x12x12);&#xA;然后会让你创建用户，可以按Ctrl+C跳过;&#xA;当显示已经启动完成，让你再登录之后，输入用户名root和前一步的自定义密码x12x12，即可进入命令行，然后执行nand–sata-install命令将系统刷写进N1的emmc中。&#xA;新的 armbian 镜像的刷入命令改成了 armbian-install，见 github release 的说明&#xA;安装好后的配置 添加用户 执行 adduser zwyyy 创建用户并执行usermod -aG sudo username添加到sudo用户组，之后的命令都在zwyyy用户下执行;</description>
    </item>
    <item>
      <title>Vercel 部署 Hugo</title>
      <link>http://localhost:1313/posts/blog/vercel_scilence.zh/</link>
      <pubDate>Wed, 16 Nov 2022 16:46:59 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/vercel_scilence.zh/</guid>
      <description>让 Vercel 部署 GitHub 项目成功时，不再自动发送邮件通知 在github项目根目录下新建vercel.json，内容为:&#xA;{ &amp;#34;github&amp;#34;: { &amp;#34;silent&amp;#34;: true } } Vercel 环境变量设置 Vercel 默认的 Hugo 版本可能很低，需要通过环境变量指定 Hugo 版本，如下：</description>
    </item>
    <item>
      <title>Install debian bookworm</title>
      <link>http://localhost:1313/posts/blog/debian_testing/</link>
      <pubDate>Sat, 12 Nov 2022 09:58:28 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/debian_testing/</guid>
      <description></description>
    </item>
    <item>
      <title>安装 Debian bookworm</title>
      <link>http://localhost:1313/posts/blog/debian_testing.zh/</link>
      <pubDate>Sat, 12 Nov 2022 09:58:14 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/debian_testing.zh/</guid>
      <description>配置语言环境 我在安装debian的时候，有个地方选择了HK，因此使用locale命令查看当前的区域相关设置时，显示为: 其中:LANG为默认的区域设置，该变量的值会覆盖所有未设置的LC_*变量的值;&#xA;要修改为en_US，首先执行sudo dpkg-reconfigure locales，然后选中en_US.UTF-8，取消en_HK那个，取消inherit的那个，还可以选中zh_CN.UTF-8，这样就启用了en_US.UTF-8和zh_CN.UTF-8;&#xA;由于我的桌面环境为KDE PLasma，其语言设置会覆盖locale.conf的设置，执行vim ~/.config/plasma-localerc，修改该文件为:&#xA;[Formats] LANG=en_US.UTF-8 LC_ADDRESS=en_US.UTF-8 LC_MEASUREMENT=en_US.UTF-8 LC_MONETARY=en_US.UTF-8 LC_NAME=en_US.UTF-8 LC_NUMERIC=en_US.UTF-8 LC_TELEPHONE=en_US.UTF-8 LC_TIME=en_US.UTF-8 [Translations] LANGUAGE=en_US:C:zh_CN 其中LANGUAGE为备用语言，很多软件并未将其英文locale设置为en或en_US，而是使用默认locale C。如果在LANGUAGE中将非英文locale设置到English之后，例如LANGUAGE=en_US:en:es_ES，那么即使英语字符存在，应用程序可能会选择使用后备locale，解决方法是强制在英语locale后面设置C，例如 LANGUAGE=en_US:en:C:es_ES。&#xA;fcitx-rime 安装fcitx-rime sudo apt install fcitx-rime&#xA;安装小鹤双拼 sudo apt-get install librime-data-double-pinyin&#xA;将小鹤双拼官方网盘，3.1-挂接&amp;ndash;音形码，小鹤音形鼠须管for macos里的default.custom.yaml复制到~/.config/fcitx/rime，并修改为:&#xA;patch: menu: page_size: 8 schema_list: - schema: flypy # 添加小鹤音形 - schema: double_pinyin_flypy - schema: luna_pinyin_simp key_binder/bindings: - when: paging accept: bracketleft send: Page_Up - when: has_menu accept: bracketright send: Page_Down - when: has_menu accept: minus send: Page_Up - when: has_menu accept: equal send: Page_Down 启动fcitx，按Ctrl+Space切换为fcitx，Ctrl+`切换选择输入方案。</description>
    </item>
    <item>
      <title>基于 hugo 和 papermod 主题搭建自己的博客</title>
      <link>http://localhost:1313/posts/blog/create_blog_with_papermod.zh/</link>
      <pubDate>Fri, 04 Nov 2022 18:22:26 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/create_blog_with_papermod.zh/</guid>
      <description>部署博客到vercel FreeNom申请域名 首先，梯子最好选择美国的，并且freenom选择地址时最好与ip所在州可以对应得上； 进入FreeNom，输入zwyb.tk，然后点击检查可用性，这里要记得输入后缀，能避免点击现在获取显示不可用的问题。 如下图所示: Cloudfare管理域名 cloudfare添加站点zwyyy456.ml，然后添加DNS record，内容如下图所示： 下一步，进入freenom, Services-&amp;gt;My Domains-&amp;gt;Manage Domain-&amp;gt;Management Tools-&amp;gt;Nameservers，选择Use custom nameservers(enter blow)，填入cloudfare生成的nameservers。注意cloudfare的SSL/TLS策略必须是Full。&#xA;vercel部署博客和绑定域名 将整个项目，如papermod这个文件夹，作为一个git仓库上传到github，然后vercel创建新项目，选择continue with github，就能将对应的仓库导入到vercel，部署的时候注意添加Environment Variables&#xA;HUGO_VERSION 0.93.0 项目部署好之后，点击该项目，Settings-&amp;gt;Domains，添加之前FreeNom申请的域名，DNS record在上一步cloudfare管理域名那里已经添加过了。</description>
    </item>
    <item>
      <title>基于 Hugo 搭建自己的博客</title>
      <link>http://localhost:1313/posts/blog/create_blog_with_hugo.zh/</link>
      <pubDate>Fri, 04 Nov 2022 18:22:26 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/create_blog_with_hugo.zh/</guid>
      <description>前言 Hugo 是用 Go 语言写的静态网站生成器（Static Site Generator）。可以把 Markdown 文件转化成 HTML 文件，因此有很多人利用 Hugo 来搭建自己的博客网站。&#xA;安装 Hugo Mac 上，执行 brew install hugo，Win 上执行 scoop install hugo 即可。使用 hugo new site test-coder 即可创建博客，该命令会在当前目录创建一个名为 test-coder 的子目录，该目录就是创建的博客的源文件仓库。其中，test-coder 可以自行修改为你希望的名称。该目录中的内容如下：&#xA;test-coder on  main [+?] ❯ ls archetypes assets content data hugo.toml i18n layouts public resources static themes archetypes：存放 front matter 模板，hugo 命令创建 .md 文件时会根据该模板来创建； content：存放博客内容； layouts：存放定义为网站的样式，写在 layouts 目录下的样式文件会覆盖安装的主题中的 layouts 目录下的同名样式文件； static：存放静态文件，static 目录中的内容会在编译时会被移动到 public 目录，而本地的 public 目录对应着网站的根目录； public：存放 hugo 生成的静态网页； themes：存放主题文件； config.</description>
    </item>
    <item>
      <title>Vscdoe 通过cookie 登陆美区 LeetCode</title>
      <link>http://localhost:1313/posts/blog/vscode-leetcode-cookie.zh/</link>
      <pubDate>Tue, 27 Sep 2022 22:47:15 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/vscode-leetcode-cookie.zh/</guid>
      <description>安装插件 vscode 安装leetcode插件。&#xA;使用cookie登陆 如果选择使用github登陆leetcode.com，似乎会有无法提交和测试的bug，而用cookie登陆就没有这个问题&#xA;使用edge获取cookie 使用Firefox获取的cookie有问题，无法正常登陆&#xA;右键，选择检查 选择网络 打开leetcode的problem页面 下滑找到cookie那一栏，复制cookie </description>
    </item>
    <item>
      <title>为 papermod 主题添加 Latex 支持</title>
      <link>http://localhost:1313/posts/blog/latex_support_papermod.zh/</link>
      <pubDate>Mon, 26 Sep 2022 11:42:46 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/latex_support_papermod.zh/</guid>
      <description>steps to follow 在themes/PaperMod/layouts/partials目录下创建math.html文件，文件内容如下&#xA;&amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;https://cdn.jsdelivr.net/npm/katex@0.16.2/dist/katex.min.css&amp;#34; integrity=&amp;#34;sha384-bYdxxUwYipFNohQlHt0bjN/LCpueqWz13HufFEV1SUatKs1cm4L6fFgCi1jT643X&amp;#34; crossorigin=&amp;#34;anonymous&amp;#34;&amp;gt; &amp;lt;script defer src=&amp;#34;https://cdn.jsdelivr.net/npm/katex@0.16.2/dist/katex.min.js&amp;#34; integrity=&amp;#34;sha384-Qsn9KnoKISj6dI8g7p1HBlNpVx0I8p1SvlwOldgi3IorMle61nQy4zEahWYtljaz&amp;#34; crossorigin=&amp;#34;anonymous&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script defer src=&amp;#34;https://cdn.jsdelivr.net/npm/katex@0.16.2/dist/contrib/auto-render.min.js&amp;#34; integrity=&amp;#34;sha384-+VBxd3r6XgURycqtZ117nYw44OOcIax56Z4dCRWbxyPt0Koah1uHoK0o4+/RRE05&amp;#34; crossorigin=&amp;#34;anonymous&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; document.addEventListener(&amp;#34;DOMContentLoaded&amp;#34;, function() { renderMathInElement(document.body, { // customised options // • auto-render specific keys, e.g.: delimiters: [ {left: &amp;#39;$$&amp;#39;, right: &amp;#39;$$&amp;#39;, display: true}, {left: &amp;#39;$&amp;#39;, right: &amp;#39;$&amp;#39;, display: false}, {left: &amp;#39;\\(&amp;#39;, right: &amp;#39;\\)&amp;#39;, display: false}, {left: &amp;#39;\\[&amp;#39;, right: &amp;#39;\\]&amp;#39;, display: true} ], // • rendering keys, e.g.: throwOnError : false }); }); &amp;lt;/script&amp;gt; 编辑themes/PaperMod/layouts/partials目录下的extend_head.</description>
    </item>
    <item>
      <title>为 PaperMod 主题添加 LaTeX 支持</title>
      <link>http://localhost:1313/posts/blog/latex_support_papermod/</link>
      <pubDate>Mon, 26 Sep 2022 11:42:46 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/latex_support_papermod/</guid>
      <description>steps to follow 在themes/PaperMod/layouts/partials目录下创建math.html文件，文件内容如下&#xA;&amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;https://cdn.jsdelivr.net/npm/katex@0.16.2/dist/katex.min.css&amp;#34; integrity=&amp;#34;sha384-bYdxxUwYipFNohQlHt0bjN/LCpueqWz13HufFEV1SUatKs1cm4L6fFgCi1jT643X&amp;#34; crossorigin=&amp;#34;anonymous&amp;#34;&amp;gt; &amp;lt;script defer src=&amp;#34;https://cdn.jsdelivr.net/npm/katex@0.16.2/dist/katex.min.js&amp;#34; integrity=&amp;#34;sha384-Qsn9KnoKISj6dI8g7p1HBlNpVx0I8p1SvlwOldgi3IorMle61nQy4zEahWYtljaz&amp;#34; crossorigin=&amp;#34;anonymous&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script defer src=&amp;#34;https://cdn.jsdelivr.net/npm/katex@0.16.2/dist/contrib/auto-render.min.js&amp;#34; integrity=&amp;#34;sha384-+VBxd3r6XgURycqtZ117nYw44OOcIax56Z4dCRWbxyPt0Koah1uHoK0o4+/RRE05&amp;#34; crossorigin=&amp;#34;anonymous&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; document.addEventListener(&amp;#34;DOMContentLoaded&amp;#34;, function() { renderMathInElement(document.body, { // customised options // • auto-render specific keys, e.g.: delimiters: [ {left: &amp;#39;$$&amp;#39;, right: &amp;#39;$$&amp;#39;, display: true}, {left: &amp;#39;$&amp;#39;, right: &amp;#39;$&amp;#39;, display: false}, {left: &amp;#39;\\(&amp;#39;, right: &amp;#39;\\)&amp;#39;, display: false}, {left: &amp;#39;\\[&amp;#39;, right: &amp;#39;\\]&amp;#39;, display: true} ], // • rendering keys, e.g.: throwOnError : false }); }); &amp;lt;/script&amp;gt; 编辑themes/PaperMod/layouts/partials目录下的extend_head.</description>
    </item>
  </channel>
</rss>
