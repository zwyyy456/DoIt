<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial on My New Hugo Site</title>
    <link>http://localhost:1313/categories/tutorial/</link>
    <description>Recent content in Tutorial on My New Hugo Site</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 21 Aug 2024 23:22:48 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/tutorial/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RHEL 7 个人开发环境部署</title>
      <link>http://localhost:1313/posts/blog/rhel7-dev-env-deploy.zh/</link>
      <pubDate>Wed, 21 Aug 2024 23:22:48 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/rhel7-dev-env-deploy.zh/</guid>
      <description>前言 入职了某公司，福利待遇不错，就是这开发环境属实一言难尽，开发机部署在内网，没有网络，只能通过内外网交换软件传文件，没有 root 权限（暂无，后面拿到 root 权限我也不敢用来安装什么软件），开发机的系统版本还特别旧，是 2014 年发布的 RHEL 7，上面的软件版本也是老掉牙了（除了没人用的 cmake），令人无语。故这里记录一下我克服困难，在这个 RHEL 7 上配置开发环境的步骤。&#xA;注，考虑到安全问题，以及权限受限，软件都安装在 $HOME/.local 目录下，然后设置对应的环境变量，其中 bash 不会去设置环境变量。&#xA;整体部署思路如下，利用自己的 VPS 开了一个 CentOS 7 的 docker 镜像，并创建一个与开发机上本人用户一致的用户，并使其 $HOME 目录与开发机的一致，在 CentOS 7 上，通过源码编译安装到 $HOME/.local 目录下，然后将 $HOME/.local 目录拷贝到开发机上，再配置好对应的环境变量，如果再不行，再考虑把源码以及依赖的源码拷贝到开发机上，再进行编译安装。&#xA;可以通过执行 ldd ${binary_name} 来查看运行该程序需要哪些动态链接库。&#xA;软件安装 GCC 执行以下命令即可安装 GCC：&#xA;mkdir src # 安装依赖库 GMP cd $HOME/src wget https://gmplib.org/download/gmp/gmp-6.2.1.tar.xz tar -xvf gmp-6.2.1.tar.xz cd gmp-6.2.1 ./configure --prefix=$HOME/.local make -j$(nproc) make install # 安装依赖库 MPFR cd $HOME/src wget https://www.</description>
    </item>
    <item>
      <title>基于 Hugo 搭建个人博客</title>
      <link>http://localhost:1313/posts/blog/build-site-with-papermod.zh/</link>
      <pubDate>Sun, 11 Aug 2024 09:51:38 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/build-site-with-papermod.zh/</guid>
      <description>简介与安装 Hugo 是一个用 Go 编写的静态网站生成器，可以轻松生成个人博客。&#xA;Hugo 安装起来也非常方便，以下是 Hugo 的安装命令：&#xA;brew install hugo # mac sudo apt install hugo # Debian scoop install hugo # windows Windows 推荐使用 scoop 包管理器，非常好用&#xA;安装好 Hugo 后，执行 hugo new site blog 就会在当前目录下创建名为 blog 的目录，Hugo 后续将基于该目录中的内容来创建网站。&#xA;主题配置 这里介绍了三个个人比较喜欢的 Hugo 主题的配置方案。读者可以自选其一，我是部署了三个博客网站，当然只有一个能被搜索引擎检索到。&#xA;PaperMod 安装主题 在 blog 目录下，执行以下命令：&#xA;git submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod git submodule update --init --recursive # needed when you reclone your repo (submodules may not get cloned automatically) 主题就被安装在了 blog/themes/PaperMod 目录下，该目录下就是 PaperMod 主题的源码。</description>
    </item>
    <item>
      <title>安卓电视盒子的折腾之旅</title>
      <link>http://localhost:1313/posts/blog/android-tv-box.zh/</link>
      <pubDate>Tue, 11 Jun 2024 22:39:23 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/android-tv-box.zh/</guid>
      <description>前言 论文写完之后，以 840 元的价格购入了投影群里群友的优派 PJD7822HDL，只能说还能凑合用吧，噪音与发热巨大，开节能模式之后勉强可以接受，标称 3200 流明，实际上亮度不超过 50% 的情况下才能有比较好的对比度，亮度拉高了之后泛白严重，白天关灯拉窗帘看，由于我房间的窗帘的遮光性一般，感觉亮度还是低了点，晚上看倒不错，自带的音响效果也很一般（从闲鱼上淘了对音箱解决了）。不过好歹也是 dmd0.65，原生的 1080P 分辨率，清晰度还是让人满意的。&#xA;不过，该投影仪并无安卓系统，为了解决影视内容问题，我就开始在闲鱼上淘电视盒子，一共考虑了以下几个设备：移动魔百盒、亚马逊火棒、以及外贸盒子。&#xA;移动魔百盒 我是在 v2ex 上看到有人 60 出 cm211-1 增强版（2+16g），于是买下了它，事实证明这玩意现在最多值 50（因为我在闲鱼上 50r 又买了一个）。&#xA;这个魔百盒的 cpu 为晶晨 S905L3，默认固件是基于老掉牙的安卓 4.4，好在可以刷的固件还是不少的，我选择的是基于 Android TV 9.0 的 slimbox 固件，还是折腾了好一番才刷入的固件。&#xA;步骤如下，首先去淘宝购买了晶晨 S905 的免拆短接 HDMI 刷机工具，将它插在盒子的 HDMI 口，打开商家提供的刷机软件 USB Burning Tool ，和以前 N1 刷机的时候用的其实是同一个软件，该软件非绿色版，安装的时候会为你安装晶晨的相关驱动，安装好之后打开该软件，通过 USB 双头线连接电脑和魔百盒，打开 USB_Burning_Tool，会检测到已连接到设备，点击 文件 -&amp;gt; 导入烧录包 来导入 img 格式的固件，烧录配置选择默认的 擦除 flash 和 擦除 bootloader 即可，就可以开始烧录了，耐心等待即可。&#xA;由于该盒子已经刷过机了，按理来说不需要短接就能直接刷，也不需要什么免拆工具，强烈怀疑之前一直检测不到设备是因为用的绿色版，没有安装驱动。&#xA;刷好机之后，可以通过 Google play store 安装 Plex，理论上就能愉快玩耍了，然而我发现一个严重的问题，那就是用 Plex 播放音轨为 ac3 或者 eac3 格式的视频，会没有声音，经查找资料，应该是因为 S905L3 这个芯片不支持解码杜比全景声，而 Plex 默认对于这两种格式的音轨是在本地客户端直接硬解的，所以播放这样的视频会没有声音，而 Plex 的 tv 端界面无法像手机端那样针对音频格式设置是否硬解，因此，只能放弃这一款魔百盒，安装好 Tvbox 与 Emby，准备拿回去给家里人用了。</description>
    </item>
    <item>
      <title>VSCode 工作空间（Workspace）指北</title>
      <link>http://localhost:1313/posts/blog/vscode-workspace.zh/</link>
      <pubDate>Sat, 25 May 2024 10:33:04 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/vscode-workspace.zh/</guid>
      <description>为什么要用工作区 VSCode 作为一个轻量的编辑器，对比 IDE 很多功能并非集成。如果想打造成一个 IDE，那么就需要安装很多扩展，然而扩展越多，管理起来也越发困难，VSCode 也就越发“笨重”，例如，当我进行 cpp 开发的时候，python 与 go 的相关插件就不需要了，然而其默认也是开启的，我们当然可以手动关闭，有需要的时候再打开。然而，随着这样的扩展越来越多，手动控制扩展的开启与关闭就变得非常麻烦。&#xA;我认为 VSCode 的工作区（Work Space）诞生的一大重要原因就是扩展的管理。事实上，当我们打开 VSCode 的时候，其实就位于默认的工作区中。&#xA;工作区的创建 假设我只会在 ~/code/blog/zwyb_blog 目录下用 VSCode 写博客，那么我用 VSCode 打开 ~/code/python 目录，我就可以点击 File -&amp;gt; Save Workspace as，保存为 blog.code-workspace。&#xA;目前，其内容如下：&#xA;{ &amp;#34;folders&amp;#34;: [ { &amp;#34;path&amp;#34;: &amp;#34;.&amp;#34; }, ], &amp;#34;settings&amp;#34;: {} } 可以看到，内容分为了 folders 与 settings 两大类，folders 表示处于该工作空间的文件夹所在目录，我们可以点击 File -&amp;gt; Add Folder to Workspace 来添加其他项目文件夹目录到该工作区，例如我添加了 ~/code/blog/papermod 目录，添加后内容修改为如下：&#xA;{ &amp;#34;folders&amp;#34;: [ { &amp;#34;path&amp;#34;: &amp;#34;.&amp;#34; }, { &amp;#34;path&amp;#34;: &amp;#34;.</description>
    </item>
    <item>
      <title>使博客被搜索引擎收录</title>
      <link>http://localhost:1313/posts/blog/blog-google-bing.zh/</link>
      <pubDate>Wed, 15 May 2024 15:44:28 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/blog-google-bing.zh/</guid>
      <description>前言 在网站没有被搜索引擎收录之前，网站内容是无法通过搜索引擎搜索到的，因此我们手动让网站被 Google 和 Bing 收录。&#xA;Google 进入 Google Search Console，点击 添加资源，资源类型选择 网址前缀，这里我的网址前缀为 https://blog.zwyyy456.tech/，验证方法选择通过 HTML 文件，按照提示，下载一个 google 开头的 html 文件，将这个文件放在 Hugo 博客文件目录的 static 目录下，这是因为 static 目录中的文件与目录在编译时，会被复制到 public 目录，即网站的根目录。&#xA;完成验证之后，下一步则是添加网站地图，如下图所示：&#xA;Hugo 会自动为我们生成 sitemap.xml 文件，即站点地图，由于我的网站支持中英双语，因此站点地图的位置为 https://blog.zwyyy456.tech/zh/sitemap.xml 和 https://blog.zwyyy456.tech/en/sitemap.xml，如果是单语言的 Hugo 博客网站，则是 https://HugoExample.com/sitemap.xml。添加好站点地图之后等待谷歌处理数据即可。&#xA;Bing 进入 Bing Webmaster Tools，可以直接从 Google Search Console 导入网站，提交站点地图的方法是类似的。&#xA;为博客添加搜索功能 我使用的博客主题是秉承简洁纯粹理念的 hugo_coder 主题，该主题不支持搜索功能，而我比较需要这个搜索功能，因此通过 Google 或者 Bing 的自定义搜索功能来为博客添加搜索功能是一个比较简单的做法，这里我使用的是 Bing 的自定义搜索功能。</description>
    </item>
    <item>
      <title>Win11 重装记录</title>
      <link>http://localhost:1313/posts/blog/win-reinstall.zh/</link>
      <pubDate>Sun, 03 Mar 2024 11:45:50 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/win-reinstall.zh/</guid>
      <description>起因 最近一两个月，时常碰到笔记本电脑死机的情况，具体表现为电脑卡死没反应，同时发出嗡嗡的电流声，前两天还出现了电脑蓝屏的情况，错误码为 &amp;ldquo;Clock Watchdog Timeout&amp;rdquo;，网上找了一圈，有不少人碰到了和我一样的问题，有个解决方案说要在电源模式下设置硬盘永不休眠，我尝试了，并没有用，推测可能的原因有以下几种：&#xA;笔记本过热，一般都是一边看视频一边打游戏时出现卡死的情况，并且我的笔记本电脑是外接了 4K 显示器在用，卡死的时候，能感觉到笔记本非常烫；&#xA;固态掉盘，用的海康威视 c2000 pro，据说有掉盘的先例；&#xA;奇奇怪怪的驱动、硬件兼容性问题；&#xA;正好，这个笔记本电脑的系统已经很久没有重装过了，里面的东西、配置也被我搞得挺乱了，干脆重装一遍系统，看看是否还有问题。&#xA;这篇文章主要是记录一下重装系统的过程和一些重要步骤以及要安装的软件。&#xA;备份 需要备份的文件与文件夹都在 C:\Users\zwyyy 目录下，手动把要备份的文件夹打包，拷贝到了我的移动硬盘中去。&#xA;制作系统安装 U 盘 首先，在微软官网下载 64 位的 Win11 系统镜像，下载好之后，利用 Rufus 软件将镜像写入到 U 盘中去。&#xA;然后是很重要的一步，如果直接开始安装系统，在安装过程中会发现无法识别 U 盘，对 11 代及以上的 Intel CPU 的笔记本，要识别 NVME 协议的固态硬盘，需要安装一个名为 Intel Rapid Storage Technology（IRST）的驱动程序，可以去笔记本厂商的官网下载对应的驱动，将驱动压缩包解压到系统安装 U 盘中即可，在安装系统，选择将 Windows 安装在哪里时，点击加载驱动程序，选择之前驱动程序解压到的那个目录，即可找到对应的驱动程序，加载了驱动程序之后，就能识别到硬盘了，之后的安装就是正常按照指引来就行了。&#xA;acer 下载驱动需要先下载一个序列号检测识别软件，识别到序列号之后，就能下载电脑型号的对应驱动程序了。&#xA;我的笔记本型号为 SWIFT SF314-511&#xA;驱动安装 重装好系统之后发现触控板和指纹不可用，需要安装驱动，打开 设置 -&amp;gt; Windows 更新 -&amp;gt; 高级选项 -&amp;gt; 可选更新 -&amp;gt; 驱动程序更新，即可安装这些驱动程序。&#xA;软件安装 Scoop 打开 Microsoft Store，安装 Windows Terminal，然后将 Shell 设置为 Windows PowerShell，执行以下两条指令：</description>
    </item>
    <item>
      <title>利用 Latex 写毕业论文</title>
      <link>http://localhost:1313/posts/blog/latex-sjtu.zh/</link>
      <pubDate>Thu, 22 Feb 2024 20:18:43 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/latex-sjtu.zh/</guid>
      <description>前言 本科写毕业论文的时候，是用的学校的 word 模板，体验比较糟糕，当时跟我一组的同学就是用的 Latex 的本科学位论文模板，当时由于我写本科毕业论文的时间比较紧迫了，所以没有折腾这些，此外，当时的 Latex 学位论文模板属于是纯民间支持的性质，而现在，学校已经半官方地支持了 Latex 学位论文模板，因此，研究生毕业论文我就准备使用 Latex 而不再使用 word 来写了。&#xA;模板介绍 首先观察 main.tex，其中 \input{contents/abstract} 就是表示会加载 main.tex 所在目录的的 contents 目录下的 abstract.tex 的内容，即摘要。&#xA;然后是 \tablecontents 命令以生成目录，目录生成方式应该是由模板决定的。&#xA;以下这些则是正文内容：&#xA;\input{contents/intro} \input{contents/math_and_citations} \input{contents/floats} \input{contents/summary} 我们可以观察一下 contents 目录下的 intro.tex，首先是 \chapter{简介}，这里的大括号中的内容就是这一章的标题，后续则分别是一级标题、二级标题、三级标题、四级标题，对应的 Latex 语法如下：&#xA;\section{二级标题} \subsection{三级标题} \subsubsection{四级标题} 模板的默认字体应该就是宋体，模板中给出了手动指定该段落的字体的方法。&#xA;contents 目录下的 math_and_citations.tex 给出了 Latex 中的数学公式（包括字符）与引用文献的标注方法。&#xA;contents 目录下的 floats.tex 则是给出了 Latex 插入图片与表格的方法。&#xA;setup.tex 中则是封面以及 Latex 的样式控制的相关信息。&#xA;SJTUThesis 模板食用方法 Overleaf 学校网络信息中心应该是根据 Overleaf 自己搭建了一个可以在线编译 Latex 的平台：Latex 文档助手。&#xA;首先去 SJTUThesis 的 GitHub 页面下载论文模板的 压缩包：master.</description>
    </item>
    <item>
      <title>Mac 与 win 之间的云同步处理</title>
      <link>http://localhost:1313/posts/blog/cloud-sync.zh/</link>
      <pubDate>Mon, 15 Jan 2024 16:02:28 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/cloud-sync.zh/</guid>
      <description>iCloud iCloud 是 Mac 的默认云盘，Apple 为 Mac 提供了一定程度上的 iCloud 集成，在 Apple ID -&amp;gt; iCloud -&amp;gt; iCloud 云盘 中，可以选择让“桌面与文稿文件夹”也使用 iCloud 云盘，此时，你原先的 /Users/Documents 和 /Users/Desktop 会被替换为 iCloud/Documents 中的 文稿 - zwy - mbp14 以及 icloud/Desktop 中的 桌面 - zwy - mpb14 目录，同时 iCloud 中的 文稿 目录与 桌面 目录会被分别作为 Mac 的 /Users/Documents 与 /Users/Desktop 目录，推测是通过符号链接来实现的？&#xA;此后所有的对 /Users/Docuements 与 /Users/Desktop 的修改都会反映到 iCloud 中。&#xA;要注意一点，推荐关闭 iCloud 的 优化 Mac 储存空间 功能，否则当你的 Mac 存储空间不足的时候，/Users/Documents 与 /Users/Desktop 目录中的内容会变成仅保存在 iCloud 云端，而本地没有保存内容，这会导致在这两个目录中执行 git 与 cd 等命令非常卡顿。</description>
    </item>
    <item>
      <title>简单的 GPW 发种教程</title>
      <link>http://localhost:1313/posts/blog/gpw-upload-tutorial.zh/</link>
      <pubDate>Sun, 31 Dec 2023 15:38:45 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/gpw-upload-tutorial.zh/</guid>
      <description>简介 主要使用基于 Debian 的 VPS 进行发种，流程上与纯粹的 Windows 平台发种略有不同，需要依赖命令行工具进行处理。&#xA;mediainfo 执行 sudo apt install mediainfo 即可安装 mediainfo，执行 mediainfo video_name 即可生成对应的 mediainfo。&#xA;可以利用 &amp;gt; 将输出重定向到指定文件。&#xA;视频截图 海豹要求三张原始分辨率的视频截图，我们可以利用 ffmpeg 来抓取截图。&#xA;执行 sudo apt install ffmpeg 即可安装 ffmpeg。&#xA;通过执行 ffmpeg -ss 00:08:06 -i $video_file -vframes 1 -f image2 -y test1.png 即可生成原始分辨率的 png 截图，其中 $video_file 要替换成对应的文件名。&#xA;生成种子 执行 sudo apt install mktorrent 安装 mktorrent，执行 mktorrent&#xA;脚本 将 mediainfo 和 视频截图整合成了一个简单的 bash 脚本：&#xA;#!/bin/bash video_file=&amp;#34;&amp;#34; # 遍历当前目录下所有 .</description>
    </item>
    <item>
      <title>简单的 GPW 发种教程</title>
      <link>http://localhost:1313/posts/blog/vscode-leetcode-cookie/</link>
      <pubDate>Sun, 31 Dec 2023 15:38:45 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/vscode-leetcode-cookie/</guid>
      <description>简介 主要使用基于 Debian 的 VPS 进行发种，流程上与纯粹的 Windows 平台发种略有不同，需要依赖命令行工具进行处理。&#xA;mediainfo 执行 sudo apt install mediainfo 即可安装 mediainfo，执行 mediainfo video_name 即可生成对应的 mediainfo。&#xA;可以利用 &amp;gt; 将输出重定向到指定文件。&#xA;视频截图 海豹要求三张原始分辨率的视频截图，我们可以利用 ffmpeg 来抓取截图。&#xA;执行 sudo apt install ffmpeg 即可安装 ffmpeg。&#xA;通过执行 ffmpeg -ss 00:08:06 -i $video_file -vframes 1 -f image2 -y test1.png 即可生成原始分辨率的 png 截图，其中 $video_file 要替换成对应的文件名。&#xA;生成种子 执行 sudo apt install mktorrent 安装 mktorrent，执行 mktorrent&#xA;脚本 将 mediainfo 和 视频截图整合成了一个简单的 bash 脚本：&#xA;#!/bin/bash video_file=&amp;#34;&amp;#34; # 遍历当前目录下所有 .</description>
    </item>
    <item>
      <title>将博客的图床从 SM.MS 迁移到又拍云</title>
      <link>http://localhost:1313/posts/blog/change-image-src-from-smms-to-upyun.zh/</link>
      <pubDate>Tue, 26 Dec 2023 16:25:29 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/change-image-src-from-smms-to-upyun.zh/</guid>
      <description>前言 为了存储博客的图片，我需要一个图床，一开始本来是想用七牛云或者又拍云提供的免费存储服务和流量来做图床的，奈何它们都需要一个通过了备案的域名才能实现，于是退而求其次选择了 SM.MS，在 picgo 或者 upic 中配置 SM.MS 图床非常方便，填一个 token 即可，在科学加持的情况下，图片显示也是很快速的。&#xA;但是，由于我的博客很多内容是我自己的学习笔记，因此其中的图片内容也是很重要的，考虑到 SM.MS 的图床稳定性与国内的可直接访问性，当我的 zwyyy456.tech 域名通过备案之后，我就着手将图床从 SM.MS 迁移到了又拍云。&#xA;又拍云设置 又拍云联盟的用户每月可获得 10GB 免费存储空间与 15GB 免费 CDN 流量，要加入又拍云联盟也很简单，只需要在网站地步添加又拍云 LOGO 与又拍云网站的对应链接即可。&#xA;在博客所属根目录下，将 layouts/partials/foot.html 的内容修改为如下：&#xA;&amp;lt;footer class=&amp;#34;footer&amp;#34;&amp;gt; &amp;lt;section class=&amp;#34;container&amp;#34;&amp;gt; © {{ if (and .Site.Params.since (lt .Site.Params.since now.Year)) }} {{ .Site.Params.since }} - {{ end }} {{ now.Year }} {{ with .Site.Params.author }} {{ . }} {{ end }} · {{ if (and .Site.Params.license) }} {{ i18n &amp;#34;licensed_under&amp;#34; }} {{ .</description>
    </item>
    <item>
      <title>Git 如何避免 &#39;warning: LF will be replaced by CRLF&#39;</title>
      <link>http://localhost:1313/posts/blog/git-crlf-lf.zh/</link>
      <pubDate>Mon, 18 Dec 2023 22:02:46 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/git-crlf-lf.zh/</guid>
      <description>问题描述 前面提到，我会使用 Filen 来同步文件，例如当我在 macOS 上创建了 .md 文件而忘记 push 到 GitHub 时，回到宿舍，打开我 Windows 系统的 Acer 笔记本（后续以 Acer 指代该笔记本）时，Filen 会自动将 .md 文件同步到 Acer，然后当我在 Acer 上完成对该 .md 的编辑并 commit 时，就会提示如下内容：&#xA;CR 表示 \r，LF 表示 \n&#xA;warning: LF will be replaced by CRLF in content/posts/blog/n1-plex-music.zh.md. The file will have its original line endings in your working directory 我们在安装 Git 时，默认 core.autocrlf = true，即 Git 会认为，工作区的文件都应该用 \r\n 来换行，如果工作区因为新增（在这个情境下就是因为 Filen 把文件同步到了 Acer）或编辑出现了 \n 换行符的文件，git add 这些文件时，发现准备提交的文件是 \n 作为换行符，就会出现这个警告，并提示哪些文件是 \n 换行的，但是 Git 不会对工作区这些文件做换行符的转换）。</description>
    </item>
    <item>
      <title>解决 Netlify 部署 Hugo 静态博客时的 `fatal: remote error: upload-pack: not our ref` 问题</title>
      <link>http://localhost:1313/posts/blog/netlify-build-error.zh/</link>
      <pubDate>Mon, 18 Dec 2023 12:46:49 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/netlify-build-error.zh/</guid>
      <description>问题描述 我的其中一个 Hugo 博客采用了 PaperMod 主题，另一个是 hugo-coder 主题，都是通过 Netlify 部署，昨天晚上发现，Netlify 显示 paper.191000.xyz 对应的站点部署失败。&#xA;问题日志显示：&#xA;12:26:05 PM: Waiting for other deploys from your team to complete. Check the queue: https://app.netlify.com/teams/zwyyy456/builds 12:26:20 PM: build-image version: 3ffff9df3d5419545acc1b673a54de348174406d (focal) 12:26:20 PM: buildbot version: 4613af4169363e3b38cfadfa4665d34cd1d1427b 12:26:20 PM: Fetching cached dependencies 12:26:20 PM: Starting to download cache of 106.8MB 12:26:22 PM: Finished downloading cache in 1.935s 12:26:22 PM: Starting to extract cache 12:26:23 PM: Finished extracting cache in 720ms 12:26:23 PM: Finished fetching cache in 2.</description>
    </item>
    <item>
      <title>解决 macOS 上的 fish 出现的 &#39;et_color Unkown color &#39; 问题</title>
      <link>http://localhost:1313/posts/blog/win-macos-fish_variables.zh/</link>
      <pubDate>Mon, 18 Dec 2023 11:14:37 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/win-macos-fish_variables.zh/</guid>
      <description>问题简介 我主要使用的 shell 是开箱即用的 fish，fish 的配置文件位于 ~/.config/fish 中，整个 .config 目录使用 Filen 实现在 macOS 和 Windows 之间的同步，并且使用 Git 进行版本管理。&#xA;当我昨天在 Windows 下修改了 .config/nvim 目录中的文件，将修改 push 到 GitHub 之后，今天在 Mac 上将修改 pull 到本地之后，fish 就出现了 &#39;et_color: Unkown color &#39; 问题，如下图所示：&#xA;解决方案 检查 ~/.config/fish/fish_variables 文件，与 Filen 中记录的历史版本进行对比，发现每一行结尾都多了 \x0d，经查阅资料， \0d 表示回车，即 \r，而 mac 默认的换行标识为 \n。&#xA;删掉所有的 \x0d 之后就正常了，而问题出现的原因也很清楚了，在编辑文件（也可能是 Git 同步）的时候，fish_variables 文件的换行被从 \n 替换成了 \r\n，于是，就出现了上述的问题。&#xA;在我记忆中，我在 Windows 下应该是没有修改过 fish_variables文件的。&#xA;后续需要配置一下 Windows 下 Git 的换行符设置问题。</description>
    </item>
    <item>
      <title>RemNote 入门教程</title>
      <link>http://localhost:1313/posts/blog/remnote-tutorial.zh/</link>
      <pubDate>Thu, 14 Dec 2023 14:57:19 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/remnote-tutorial.zh/</guid>
      <description>自定义字体 RemNote 的默认字体用于代码块时，显示效果十分拉垮，i 与 e 这两个字母的看起来明显比 m 之类的字母更细。&#xA;RemNote 可以通过 Custom CSS 来自定义显示效果，关键在于找到对应的 CSS selector。&#xA;我们可以在 Firefox 上打开 www.remnote.com，点开一篇笔记，例如 200 秋招，然后鼠标划词选中内容，右键点击 检查，如下图所示：&#xA;因此，可以注意到，行内代码对应的 selector 为 .rn-code-node .w-full .font-mono，因此 Custom CSS 添加&#xA;.rn-code-node .w-full, .font-mono { font-family: Monaco Nerd Font Mono; font-size: 14px } 而对于启用了 Lab 中的 rem code block 之后的代码块，使用同样的方式找到对应的 CSS selector：&#xA;因此 Custom CSS 添加&#xA;.rn-code-node .w-full, .font-mono { font-family: Monaco Nerd Font Mono; font-size: 14px } 同时，对于 RemNote 的笔记中的字体，这里修改为 霞鹜文楷，很好看。</description>
    </item>
    <item>
      <title>Nas 预组</title>
      <link>http://localhost:1313/posts/blog/nas-build.zh/</link>
      <pubDate>Mon, 04 Dec 2023 23:22:04 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/nas-build.zh/</guid>
      <description>功能简介 应该可以说是一台 AIO，利用 PVE 虚拟化多个系统，实现不同功能：&#xA;基于 Debian 的开发机，ssh 连接上去进行远程开发、编译； Nas，预计采用 TrueNAS SCALE； 其他服务，都通过 Docker 运行，考虑采用 FlatCar 这种容器化系统，也可能直接跑在 Debian 上。 qBittorrent; Immich; Memos; Restic; Plex Media Server CloudDrive2 IYUUPlus Alist Rclone 硬件选择 联想 RD450x CPU 拟采用 E5 2680v4。&#xA;优点：硬件成本低，机箱 + 主板 + CPU 仅需 ￥600，且有极强的扩展性；&#xA;缺点：功耗高，不带硬盘的待机功耗约为 80W，满载功耗约为 200W，无 GPU 硬件转码功能；&#xA;梵隆机箱 主板可以选择 MATX 主板，CPU 考虑使用 12400？&#xA;优点：功耗相比服务器更低，12400 待机功耗约 30W，待机功耗大概能低 50W？考虑到上海电费，一年能省下 50 * 24 /1000 * 365 * 0.75 = 300 元人民币左右，可以使用 GPU 硬件进行转码；</description>
    </item>
    <item>
      <title>使用 Filen 同步文件夹</title>
      <link>http://localhost:1313/posts/blog/filen_use.zh/</link>
      <pubDate>Tue, 28 Nov 2023 15:36:08 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/filen_use.zh/</guid>
      <description>Filen 介绍 这里直接引用官网的介绍：&amp;ldquo;Zero knowledge end-to-end encrypted cloud storage, redefined&amp;rdquo;。&#xA;即这是一个端对端加密的同步盘，类似 Dropbox 和坚果云，不同于百度网盘、115、阿里云盘这样的资源盘，支持文件历史版本。&#xA;通过他人的邀请链接注册可以获得 20G 的初始容量，之后邀请 3 个人注册可以再获得 30G 的容量，就同步来说，50G 其实也够了，我趁着黑五促销，又买了 100G 的永久容量。&#xA;目前看来，它的同步功能做得不如坚果云，不支持 webdav，也没有云桥功能（虽然这个功能我用不到）但是坚果云不付费的限制比较多，而 Filen 付费与否只与容量相关。&#xA;此外，Filen 对我而言有一个杀手级别的功能，那就是支持设置 .filenignore，即采用类似 gitignore 的语法，不同步某些特定文件，例如 build 的产物等。&#xA;文件夹同步设置 前文提到，Filen 是一个同步盘，我的用途也是实现 mac 和 windows 笔记本之间的同步，主要包括配置文件、代码文件以及博客文本文件等。&#xA;本来 onedrive 的同步功能也还可以，但是不支持“指定特定文件夹不同步”让他在同步带 .git 的代码文件夹时，非常容易出问题。&#xA;同步文件夹的设置如下图：&#xA;点击 create one 就会让你选择一个本地的文件夹，选定好之后，settings-&amp;gt;syncs 会多出一栏，点击右边的设置图标，即可配置 .filenignore，语法同 .gitignore，sync mode 一般选择 Two Way。然后点击 select remote location，可以选择要同步到云盘中的哪个文件夹，选择好之后就可以开始同步了。&#xA;选择同步的文件夹 目前，mac 上我同步了这些文件夹：&#xA;尽管除了 .ssh 和 Pictures 文件夹之外，其他文件夹都有通过 git 和进行 GitHub 进行版本管理与同步，但是难免有忘记 commit 和 push 的情况。例如，假设我在 mac 上对代码进行了修改，但是忘记 push 到 GitHub 了，然后回到了宿舍，此时宿舍的 Windows 笔记本无法获取到 mac 上对代码的修改，但有了 Filen 同步就不一样了，尽管 git 的状态与 mac 不一致，但源文件的修改是一致的，Windows 修改了之后，再 push 到 GitHub 上即可（实际上不 push 也没啥问题）。</description>
    </item>
    <item>
      <title>Mac 开发环境配置</title>
      <link>http://localhost:1313/posts/blog/mac-dev-config.zh/</link>
      <pubDate>Fri, 17 Nov 2023 17:00:43 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/mac-dev-config.zh/</guid>
      <description>前言 本文内容主要是我对 Mac 的所做的配置修改的一些记录。后续会随着时间更新，免得忘记自己对 Mac 做过什么修改了。&#xA;安装 Command Line Tools for Xcode 安装包下载 链接&#xA;安装 Homebrew 执行 /bin/bash -c &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&amp;quot; 即可。网络环境已自带科学。&#xA;大名鼎鼎的 Homebrew 无需多说，通过 Homebew 我安装了以下软件：&#xA;总的原则大概就是能用 homebrew 安装的都是使用 homebrew 安装，例如 Edge、VScode 等。&#xA;要注意的是，Homebrew 安装软件时，将软件分成了 Formulae 和 Casks 两大类，简单来说就是，有 gui 的就是 Casks，没有的就是 Formulae，安装带 GUI 的软件，例如 Neovide 时，安装指令为 brew install neovide --cask。&#xA;Homebrew 还可以用于安装字体，例如执行 brew install font-fira-mono-nerd-font --cask 即可安装 FiraMono 字体。&#xA;安装 Neovim 执行 brew install neovim 即可，然后 cd ~/.</description>
    </item>
    <item>
      <title>Debian 开发环境配置</title>
      <link>http://localhost:1313/posts/blog/debian-dev-config.zh/</link>
      <pubDate>Fri, 17 Nov 2023 16:16:27 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/debian-dev-config.zh/</guid>
      <description>前言 开发 web server 等项目，由于会使用到 Linux 的一些 API，用 Mac 来开发并不方便。我的 M1 Macbook Pro，由于采用了 arm 架构，使用虚拟机比较麻烦，并且虚拟机总觉得太笨重，不算方便。此外，也是由于 arm 架构的原因，使用 Docker 不方便，Docker Desktop 据说又卡又难用。&#xA;希望能有一个方案能同时解决以上两个问题（毕竟能用 docker 就能直接在 docker 里面跑 Debian 镜像了）。&#xA;经过一番搜索，发现了一个名为 OrbStack 的工具，可以理解为 Mac 上的 WSL，至于实现原理，这里不去深究。&#xA;OrbStack 使用起来非常方便，brew install orbstack 之后，执行 orbstack create debian orb-deb 就可以创建名为 orb-deb 的虚拟机了，虚拟机和 macOS 之间的文件访问非常方便。Linux 中可以直接访问 macOS 中的文件和目录，macOS 中也一样。并且 CPU / 磁盘 / 内存都是按需使用的。&#xA;此外，可以在 Linux 虚拟机中非常方便地执行 macOS 的命令，在 macOS 中执行虚拟机 Linux 中的命令也同样如此。&#xA;后面的内容都是 Debian 开发环境的配置了，不论是 OrbStack 的 Debian 还是 WSL 又或者是物理机、VPS 都适用。</description>
    </item>
    <item>
      <title>Sublime Text4 使用 NeoVintageous 插件</title>
      <link>http://localhost:1313/posts/blog/sublime-neovim.zh/</link>
      <pubDate>Wed, 08 Nov 2023 19:08:56 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/sublime-neovim.zh/</guid>
      <description>安装插件 利用 Sublime Text4 的 package control 安装 NeoVintageous 插件。&#xA;启用ctrl + [作为esc 点击sublime Text -&amp;gt; settings -&amp;gt;settings，编辑右侧的配置文件，添加&amp;quot;vintageous_ctrl_keys&amp;quot;: true,。&#xA;启用jk为esc 点击sublime Text -&amp;gt; settings -&amp;gt;settings，编辑右侧的配置文件，添加&amp;quot;vintageous_i_escape_jk&amp;quot;: true,&#xA;使yy会复制到系统剪贴板 点击sublime Text -&amp;gt; settings -&amp;gt;settings，编辑右侧的配置文件，添加&amp;quot;vintageous_use_sys_clipboard&amp;quot;: true,</description>
    </item>
    <item>
      <title>vscode使用 vscode-neovim 插件</title>
      <link>http://localhost:1313/posts/blog/vscode-neovim.zh/</link>
      <pubDate>Wed, 08 Nov 2023 16:52:21 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/vscode-neovim.zh/</guid>
      <description>启用插件 Win11 插件设置：Settings-user页面，Neovim Executable Paths: Win32内容设置为C:\Users\zwyyy\scoop\apps\neovim\current\bin\nvim.exe，Neovim Init Vim Paths: Win32内容无需设置。&#xA;WSL 插件设置：Settings-Remote [WSL:Debian]页面，Neovim Executable Paths: Linux内容设置为/usr/bin/nvim，Neovim Init Vim Paths: Linux内容无需设置。&#xA;MacOS 插件设置：Settings-user页面，Neovim Executable Paths: Darwin 内容设置为 /opt/homebrew/bin/nvim，Neovim Init Vim Paths: Darwin 内容无需设置。&#xA;key bindings 中查找ctrl+c，删除与neovim有关的两项，否则会导致插入模式下无法使用ctrl+c复制（我没有选择删除）。&#xA;设置 jk 为 esc 已于 1.11.1 版本废弃 编辑 keybings.json，添加&#xA;{ &amp;#34;command&amp;#34;: &amp;#34;vscode-neovim.compositeEscape1&amp;#34;, &amp;#34;key&amp;#34;: &amp;#34;j&amp;#34;, &amp;#34;when&amp;#34;: &amp;#34;neovim.mode == insert &amp;amp;&amp;amp; editorTextFocus&amp;#34;, &amp;#34;args&amp;#34;: &amp;#34;j&amp;#34; }, { &amp;#34;command&amp;#34;: &amp;#34;vscode-neovim.compositeEscape2&amp;#34;, &amp;#34;key&amp;#34;: &amp;#34;k&amp;#34;, &amp;#34;when&amp;#34;: &amp;#34;neovim.mode == insert &amp;amp;&amp;amp; editorTextFocus&amp;#34;, &amp;#34;args&amp;#34;: &amp;#34;k&amp;#34; } 使用 gc 作为注释快捷键 已废弃 原先解决方案是在 neovim 的配置目录的 lua/vscode/config 目录下新建 keymaps.</description>
    </item>
    <item>
      <title>Vimium: 让你像使用 Vim 那样控制浏览器</title>
      <link>http://localhost:1313/posts/blog/vimium.zh/</link>
      <pubDate>Sun, 05 Nov 2023 17:05:59 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/vimium.zh/</guid>
      <description>简介 Vimium 则继承了 Vim 中的常用键位，让你在使用 Chrome 的过程中，无论是浏览网页、切换标签或是其它任何操作，全都可以只通过键盘完成。&#xA;Vim 快速上手 首先，在浏览器界面中输入 ? 即可唤出 Vimium 的默认快捷键列表。&#xA;常用快捷键 页面滚动与导航 快捷键 操作 j 向下滚动 k 向上滚动 h 向左滚动 l 向右滚动 u 向上滚动半屏 d 向下滚动半屏 r 重新加载当前页面 gg 移动到页面顶部 G 移动到页面底部 打开页面 快捷键 操作 yy 将当前页面的网址拷贝到剪贴板 yf 拷贝一条链接，会让你二次选择 p 在当前 tab 打开剪贴板中的链接 P 新建页面打开剪贴板中的链接 o 在当前 tab 打开特定网址或者书签、历史记录中的网址 O 在新 tab 中打开特定网址或者书签、历史记录中的网址 T 在打开的 tab 中搜索 b 在当前 tab 打开书签中的某网址 B 在新 tab 中打开书签中的某网址 查找 快捷键 操作 / 进入查找模式 n 向下循环查找 N 向上循环查找 历史导航 快捷键 操作 H 后退 L 前进 操作 tab 快捷键 操作 K, gt 移动到下一个 tab J, gt 移动到上一个 tab g0 移动到第一个 tab g$ 移动到最后一个 tab t 创建新 tab yt 复制当前 tab 一份 x 关闭当前 tab X 恢复关闭的 tab alt + p pin / unpin 当前 tab 其他 快捷键 操作 f 在当前 tab 打开页面中的某个链接，会需要你二次选择 F 在新 tab 中打开页面中的某个链接，会需要你二次选择 </description>
    </item>
    <item>
      <title>Neovim 快捷键配置</title>
      <link>http://localhost:1313/posts/blog/nvim_keymap.zh/</link>
      <pubDate>Sun, 05 Nov 2023 17:05:51 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/nvim_keymap.zh/</guid>
      <description>Vim 快捷键 这一部分是 Vim 的默认快捷键，例如 gg、dd 等。&#xA;normal 模式快捷键 按键 操作 按键 操作 i 切换到插入模式 : 切换到命令模式 h 左移一个字符 j 下移一个字符 k 上移一个字符 l 右移一个字符 0 移至行首 $ 移至行尾 ^ 移至本行第一个非空字符 w 向右移动一个单词 W 向右移动一个单词（以空格分隔） 2w 向右移动两个单词 2W 向右移动两个单词（以空格分隔） b 向左移动一个单词 B 向左移动一个单词（以空格分隔） 2b 向左移动 2 个单词 2B 向左移动 2 个单词（以空格分隔） G 移至文档末尾 gg 移至文档首行 a 光标后插入 A 移至行末插入 o 光标下插入一行 O 光标上插入一行 x 删除光标处字符 dw 删除一个词 d0 删至行首 d$ 删至行尾 d) 删至句末 dgg 删至文件开头 dG 删至文件末尾 dd 删除该行 2dd 删除两行 r 替换当前字符 R 切换到 REPLACE 模式 u 撤回操作 &amp;lt;C-r&amp;gt; 重做撤回的操作 yy 复制当前行 p 在当前行之后粘贴内容 P 在当前行之前粘贴内容 v 打开 VISUAL 模式菜单 V 切换到逐行选择的 VISUAL 模式 / 向后搜索 ?</description>
    </item>
    <item>
      <title>解决远程主机的默认 shell 为 fish 时，vscode remote 无法连接的问题</title>
      <link>http://localhost:1313/posts/blog/fish-vscode-remote.zh/</link>
      <pubDate>Sat, 08 Jul 2023 11:30:15 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/fish-vscode-remote.zh/</guid>
      <description>问题描述 我主要用的 shell 就是 fish，主打一个开箱即用，虽然也配置过 zsh，但是感觉配置好的 zsh 在易用性上也就是 fish 的水平。&#xA;此前，一直以来默认的 shell 都是 bash，ssh 或者 vscode remote 远程连接上去之后，再输入 fish 来进行手动切换，后来嫌麻烦，就执行 chsh -s /usr/bin/fish 将默认 shell 切换到了 fish，然后 vscode remote 就连接不上了。&#xA;出现该问题的原因见该 issue 里的讨论&#xA;we still have a bug connecting to remotes with fish shells as their default shell. Using the remotePlatform setting we added a work around to make the connection work. It&amp;rsquo;s not ideal but it works. The bug specifically has to do with what seems that Fish shells don&amp;rsquo;t let us pipe in scripts after connection unless we connect with a command like ssh your_host bash.</description>
    </item>
    <item>
      <title>MIT 6.s081 实验环境搭建</title>
      <link>http://localhost:1313/posts/tech/mit6.s081-env-configuration.zh/</link>
      <pubDate>Wed, 28 Jun 2023 15:45:16 +0800</pubDate>
      <guid>http://localhost:1313/posts/tech/mit6.s081-env-configuration.zh/</guid>
      <description>2021 版 准备工作 Linux 系统，我是在实验室配的主机上装了 Debian Bookworm，然后mac 通过 ssh 连接上去进行操作，宿舍里则是使用的 wsl2，里面的发行版也是 Debian Bookworm。&#xA;开始配置 clone 源码 在 ~/Documents/code/mit 目录下执行 git clone git://g.csail.mit.edu/xv6-labs-2021，将源码 clone 下来。并执行 git clone https://github.com/mit-pdos/xv6-riscv-book.git，这个是参考资料（即 PDF 对应的 Latex 源码）&#xA;前面 clone 下来的 repository 包含了多个分支，每个分支对应一个 Lab。&#xA;执行 cd xv6-labs-2021 &amp;amp;&amp;amp; git checkout util，切换到 Lab Utilities 对应的 分支。&#xA;安装工具 执行以下两条命令：&#xA;$ sudo apt-get update &amp;amp;&amp;amp; sudo apt-get upgrade $ sudo apt-get install git build-essential gdb-multiarch qemu-system-misc gcc-riscv64-linux-gnu binutils-riscv64-linux-gnu 从而安装对应工具。&#xA;开始调试 这里会用到 tmux 的功能（非必需），在 util 分支下的 ~/Documents/code/mit/xv6-labs-2021 目录下，执行 make qemu-gdb， 然后先按 ctrl+b 再按 % 键，在 iterm2 的右侧创建一个新 panel，如图</description>
    </item>
    <item>
      <title>macOS 配置算法（第四版）的开发环境</title>
      <link>http://localhost:1313/posts/blog/algs4-java-mac-configure.zh/</link>
      <pubDate>Thu, 22 Jun 2023 17:36:50 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/algs4-java-mac-configure.zh/</guid>
      <description>Java 环境配置 前往 Adoptium 下载他们预编译的 JDK 17（最新的 LTS 版本）的安装器，安装好之后，命令行执行 java -version，输出如下：&#xA;openjdk version &amp;#34;17.0.7&amp;#34; 2023-04-18 OpenJDK Runtime Environment Temurin-17.0.7+7 (build 17.0.7+7) OpenJDK 64-Bit Server VM Temurin-17.0.7+7 (build 17.0.7+7, mixed mode) 说明环境变量已经自动配置好了。&#xA;同时前往 Jetbrains 官网下载 IntelliJ IDEA CE（懒得再申请教育优惠了），安装好之后打开，在 ~/Documets/zCode/Algs_4th/ 目录下创建名为 algs4 的新项目，JDK 选择我们安装的 JDK 17。如下图：&#xA;algs4 配置 先去书籍官网下载 algs4.jar，我这里直接放到了上面 IDEA 创建的项目的目录下，即 ~/Documets/zCode/Algs_4th/algs4/，然后用 IDEA 打开该项目，File-&amp;gt;Project Structure-&amp;gt;Modules-&amp;gt;Dependencies 点击 Module SDK 下面的加号，选择 JARs or directories，再选择我们放在项目目录下的 algs4.jar 文件，然后就会看到 algs4.jar 已经被添加到该工程的 Dependencies 依赖包中，勾选，然后点击确定，就完成了环境的搭建。</description>
    </item>
    <item>
      <title>便捷同步本地的博客文档到博客园</title>
      <link>http://localhost:1313/posts/blog/cnblog_hugo.zh/</link>
      <pubDate>Wed, 14 Jun 2023 14:22:30 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/cnblog_hugo.zh/</guid>
      <description>前言 我写博客的初心很简单，一是一些软件的配置过程（防止第二次配置的时候又抓瞎）；二是记录下一下自己学习过程中的一些心得体会，在 高乙超的博客 中，我曾经看到一句话，叫 &amp;ldquo;To learn, read; To know, write; To master, teach&amp;rdquo;。&#xA;过去二十年里，在学习的过程中，一直是作为一个输入方，应付考试倒是没啥问题，但也仅此而已了。为了更好地体会和领悟这些知识，我决定写写博客，既是做笔记，也是对自己的所学的一种整理和输出，也希望能有更多同道者看到，从而一起交流学习、共同进步。&#xA;最一开始么，其实是告诫自己，写博客的核心在于动笔输出，而不是折腾博客的主题又或是如何搭建博客站点，因此就想着选择一个现有的公开的博客平台，经过一番比较之下选择了博客园。说是比较，其实也没得太多选择的余地，除了博客园也就是 CSDN 了，然而对于 CSDN 我实在是深恶痛绝。博客园相较之下克制很多，广告少，更聚焦于技术，原创内容更多且更有深度，虽然界面以 2023 年的眼光来看比较老土了，但博客园支持自定义 CSS 啊。&#xA;没错，我还是无法控制自己，折腾了一下博客园的主题，鉴于本人对前端一窍不通，就算以后了解了，以我这种纠结来纠结去的性子，自己动手写主题，选择配色、主题、字号等绝对是噩梦，因此仅限于在 GitHub 上搜索他人做好的主题，挑了一番之后，网上比较热门的诸如 Silence 之类的主题，我都觉得太花里胡哨了，而且字体并不喜欢，找到一个设计风格不错的，奈何主题又太久没更新了，最后作罢。&#xA;最后，我还是选择了博客园自带的 Coding Life 主题，修改了一下代码块的 CSS，主要是改了代码块字体。&#xA;然而写了几篇博客之后，又发现博客园自带的编辑器太难用了。还是要自己现在本地用 VsCode 配合 Markdown Preview Enhanced 插件写好，再复制粘贴到博客园上发布，就觉得有点麻烦，倒不如用 Hugo 或者 Hexo 了，配置好之后，写好博客再敲一下命令就能搞定了。&#xA;于是我又动了用 Hexo 或者 Hugo 自己搭一个博客网站的念头，首先简单对比了一下，选择了 Hugo，比起 Hexo 来说，它性能高，配置起来更方便，Hexo 非常流行的 Next 主题我也并不喜欢，倒是 Hugo 的不少主题我非常喜欢，我个人在用的主题是 hugo-PaperMod 和 hugo-coder，没错，我一口气搭了两个网站，在我看来 hugo-coder 更好看一点，而 hugo-PaperMod 功能更为齐全，用的人更多，教程也更多。&#xA;两个博客网址分别是 zwyyy456.tech 和 paper.zwyyy456.tech。&#xA;我这两个基于 Hugo 的博客可以说是纯白嫖实现的，域名是白嫖的 Freenom 的 .</description>
    </item>
    <item>
      <title>通过 frp 使用 ssh 连接内网服务器</title>
      <link>http://localhost:1313/posts/blog/frp_ssh.zh/</link>
      <pubDate>Sun, 02 Apr 2023 17:41:53 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/frp_ssh.zh/</guid>
      <description>配置frp 安装frp ~/Prog目录下执行wget https://github.com/fatedier/frp/releases/download/v0.48.0/frp_0.48.0_linux_amd64.tar.gz下载压缩包，然后执行tar -zxvf file.path来解压，将解压生成的文件夹重命名为frp。&#xA;设置frpc.toml 修改frpc.toml文件为以下内容:&#xA;serverAddr = &amp;#34;nj1.mossfrp.cn&amp;#34; serverPort = 51960 token = &amp;#34;3nj117667696278235715&amp;#34; tls_enable = true use_encryption = true [[proxies]] name = &amp;#34;ssh&amp;#34; type = &amp;#34;tcp&amp;#34; localIP = &amp;#34;127.0.0.1&amp;#34; localPort = 22333 remotePort = 51962 [[vscode]] name = &amp;#34;vsc&amp;#34; type = &amp;#34;tcp&amp;#34; localIP = &amp;#34;127.0.0.1&amp;#34; localPort = 5433 remotePort = 51963 [[qbit]] name = &amp;#34;qbit&amp;#34; type = &amp;#34;tcp&amp;#34; localIP = &amp;#34;127.0.0.1&amp;#34; localPort = 28080 remotePort = 51968 [[qbit]] name = &amp;#34;iyuu&amp;#34; type = &amp;#34;tcp&amp;#34; localIP = &amp;#34;127.</description>
    </item>
    <item>
      <title>vscode 使用 clangd</title>
      <link>http://localhost:1313/posts/blog/clangd_vscode.zh/</link>
      <pubDate>Thu, 23 Mar 2023 15:56:21 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/clangd_vscode.zh/</guid>
      <description>环境要求 使用 wsl 或者 macOS，Linux 下同理，暂时不考虑纯 winodws。&#xA;以 wsl 为例，执行以下指令&#xA;sudo apt install clang clangd lldb cmake macOS如果安装过xcode工具包，就附带了Apple Clang编译器，否则执行brew install llvm，然后输入以下指令添加环境变量&#xA;echo &amp;#39;export PATH=&amp;#34;/opt/homebrew/opt/llvm/bin:$PATH&amp;#34;&amp;#39; &amp;gt;&amp;gt; ~/.zshrc echo &amp;#39;export LDFLAGS=&amp;#34;-L/opt/homebrew/opt/llvm/lib&amp;#34;&amp;#39; &amp;gt;&amp;gt; ~/.zshrc echo &amp;#39;export CPPFLAGS=&amp;#34;-I/opt/homebrew/opt/llvm/include&amp;#34;&amp;#39; &amp;gt;&amp;gt; ~/.zshrc 以上是针对默认 shell 为 zsh 的配置，如果你像我一样，mac 的默认 shell 是 fish，那么需要修改 ~/.config/fish/config.fish，添加环境变量，添加下方法为追加以下内容：&#xA;set -gx PATH /opt/homebrew/opt/llvm/bin $PATH set -gx LDFLAGS -L/opt/homebrew/opt/llvm/lib set -gx CPPFLAGS -I/opt/homebrew/opt/llvm/include 然后在vscode中安装 CodeLLDB、clangd、Cmake、Xmake、Cmake Tools 这几个插件，其中除了Xmake之外都必须安装。&#xA;开始 随便找一个空文件打开，然后Ctrl+shift+p（macOS下为cmd+shift_p）打开下拉菜单，搜索camke，选择Quick start： 之后给项目起个名字，如webserver，输出类型选Executable而不是lib，Kit选择Clangxxxxx-gnu。&#xA;macOS 必须选择 homebrew 安装的 clang kit，否则会出现无法找到 ninja 的问题。</description>
    </item>
    <item>
      <title>Zsh 的简单配置与使用</title>
      <link>http://localhost:1313/posts/blog/zsh_configuration.zh/</link>
      <pubDate>Thu, 23 Mar 2023 10:55:08 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/zsh_configuration.zh/</guid>
      <description>安装starship MacOS下执行curl -sS https://starship.rs/install.sh | sh即可，Linux下（如Debian），执行curl -sS https://starship.rs/install.sh | sh即可，然后执行starship preset pure-preset &amp;gt; ~/.config/starship.toml将预设主题设置为pure。&#xA;安装zinit插件 执行bash -c &amp;quot;$(curl --fail --show-error --silent --location https://raw.githubusercontent.com/zdharma-continuum/zinit/HEAD/scripts/install.sh)&amp;quot;以自动安装**zinit。&#xA;修改~/.zshrc为以下内容&#xA;## 启用starship eval &amp;#34;$(starship init zsh)&amp;#34; ### Added by Zinit&amp;#39;s installer if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then print -P &amp;#34;%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f&amp;#34; command mkdir -p &amp;#34;$HOME/.local/share/zinit&amp;#34; &amp;amp;&amp;amp; command chmod g-rwX &amp;#34;$HOME/.local/share/zinit&amp;#34; command git clone https://github.com/zdharma-continuum/zinit &amp;#34;$HOME/.local/share/zinit/zinit.git&amp;#34; &amp;amp;&amp;amp; \ print -P &amp;#34;%F{33} %F{34}Installation successful.</description>
    </item>
    <item>
      <title>git 使用技巧</title>
      <link>http://localhost:1313/posts/tech/git_tutorial.zh/</link>
      <pubDate>Wed, 22 Mar 2023 09:56:48 +0800</pubDate>
      <guid>http://localhost:1313/posts/tech/git_tutorial.zh/</guid>
      <description>设置默认编辑器为 vim git config --global core.editor vim 问题fatal: in unpopulated submodule &#39;xxx&#39;的解决 出现这个问题的原因clone的别人的项目之后，删除项目里的.git文件就直接添加到了自己的版本控制里面，解决方案，执行 git rm --cached . -rf，再添加文件和提交。&#xA;&amp;ldquo;merge conflict&amp;rdquo; 解决 对于纯文本文件的冲突解决，可以参考该文章，没什么太多好说的。&#xA;对于二进制文件，编辑二进制文件来解决冲突是不现实的，要么选择对方的修改，要么选择自己的修改，可以使用git checkout的--theirs或者--ours选项：&#xA;git pull git checkout --theirs YOUR_BINARY_FILE // git checkout --ours YOUR_BINARY_FILE git add YOUR_BINARY_FILE git commit -m &amp;#39;merged with the remote repos.&amp;#39; git push </description>
    </item>
    <item>
      <title>Neovim 的配置与使用</title>
      <link>http://localhost:1313/posts/blog/neovim_tutorial.zh/</link>
      <pubDate>Fri, 17 Mar 2023 15:08:52 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/neovim_tutorial.zh/</guid>
      <description>安装 LazyVim 参考 Lazyvim 的官方安装教程即可安装，要求系统已经安装好了 npm。&#xA;实际上就是 clone folke 的适用于 LazyVim 的初始 配置文件 到 Neovim 的配置文件所处的目录，Linux 和 macOS 都是 ~/.config，Windows 比较特殊，位于 ~/AppData/Local/。&#xA;由于我对初始配置文件做了一定的修改，因此我这里直接 clone 我自己的 配置文件&#xA;It is recommended to run :checkhealth after installation&#xA;值得注意的是，LazyVim 会安装 nvim-treesitter 插件，而 nvim-treesitter 插件会自动编译安装 C/C++ 等语言的解析器，而编译安装是需要 C/C++ 的运行环境的，对安装了 Command Line Tool 的 Mac 或者 Linux 而言，这一步一般不会存在问题，Windows 则是容易出现问题，我在重装 Windows 系统后尝试过只通过 scoop 安装了 llvm，尽管命令行中执行 clang --version 是有正常输出的，即 C/C++ 运行环境已经正常安装好了，但是 nvim-treesitter 始终无法正常编译解释器，不得已，我又通过 scoop install mingw 安装了 mingw（gcc），安装好 mingw 之后，解释器就能正常被编译安装了，此后执行 scoop uninstall mingw 卸载掉 mingw 也还是能正常使用。</description>
    </item>
    <item>
      <title>ssh 简单教程</title>
      <link>http://localhost:1313/posts/blog/ssh_tips.zh/</link>
      <pubDate>Tue, 14 Mar 2023 16:23:37 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/ssh_tips.zh/</guid>
      <description>ssh配置免密码登录服务器 生成密钥对 执行ssh-keygen -t ed25519 -C &amp;quot;zwyyy456@hotmail.com&amp;quot;以生成密钥对，存放在~/.ssh文件夹下，id_ed25519.pub为公钥，id_ed25519为私钥。&#xA;上传公钥到服务器 这里以我的N1为例，执行ssh-copy-id -i ~/.ssh/id_ed25519.pub root@192.168.6.217和ssh-copy-id -i ~/.ssh/id_ed25519.pub zwyyy@192.168.6.217，将公钥上传到服务器，root和zwyyy分别是两个用户。&#xA;配置局域网ssh连接到wsl hyper-v创建虚拟交换机 打开hyper-v管理器，选择虚拟交换机管理器，选择创建外部类型的虚拟交换机，这里命名为wsl_ssh。&#xA;win11上新建wsl配置文件 cd ~ New-Item .wslconfig nvim .wslconfig 修改配置文件内容为&#xA;[wsl2] networkingMode=bridged vmSwitch=wsl_ssh # 这里为你创建的虚拟交换机名称 ipv6=true 之后执行wsl --shutdown再启动wsl，就会发现ip地址为电脑本身的ip了。&#xA;openwrt上固定电脑的ip 进入openwrt的管理界面，点击网络-&amp;gt;DHCP/DNS，选择静态地址分配，固定windows笔记本的ip&#xA;启用wsl上的ssh 执行sudo nvim /etc/ssh/sshd_config，将#port 22修改为port 2222，取消注释#PasswordAuthentication yes和#PubekyAuthentcation yes，重启ssh服务，执行sudo service ssh restart。&#xA;win11设置端口转发 参照该链接&#xA;之后同一局域网的mac执行ssh -p 2222 zwyyy456@192.168.6.209，即可连接到wsl。</description>
    </item>
    <item>
      <title>ssh简单教程</title>
      <link>http://localhost:1313/posts/leet/ssh_tips.zh/</link>
      <pubDate>Tue, 14 Mar 2023 16:23:37 +0800</pubDate>
      <guid>http://localhost:1313/posts/leet/ssh_tips.zh/</guid>
      <description>ssh配置免密码登录服务器 生成密钥对 执行ssh-keygen -t ed25519 -C &amp;quot;zwyyy456@hotmail.com&amp;quot;以生成密钥对，存放在~/.ssh文件夹下，id_ed25519.pub为公钥，id_ed25519为私钥。&#xA;上传公钥到服务器 这里以我的N1为例，执行ssh-copy-id -i ~/.ssh/id_ed25519.pub root@192.168.6.217和ssh-copy-id -i ~/.ssh/id_ed25519.pub zwyyy@192.168.6.217，将公钥上传到服务器，root和zwyyy分别是两个用户。&#xA;配置局域网ssh连接到wsl hyper-v创建虚拟交换机 打开hyper-v管理器，选择虚拟交换机管理器，选择创建外部类型的虚拟交换机，这里命名为wsl_ssh。&#xA;win11上新建wsl配置文件 cd ~ New-Item .wslconfig nvim .wslconfig 修改配置文件内容为&#xA;[wsl2] networkingMode=bridged vmSwitch=wsl_ssh # 这里为你创建的虚拟交换机名称 ipv6=true 之后执行wsl --shutdown再启动wsl，就会发现ip地址为电脑本身的ip了。&#xA;openwrt上固定电脑的ip 进入openwrt的管理界面，点击网络-&amp;gt;DHCP/DNS，选择静态地址分配，固定windows笔记本的ip&#xA;启用wsl上的ssh 执行sudo nvim /etc/ssh/sshd_config，将#port 22修改为port 2222，取消注释#PasswordAuthentication yes和#PubekyAuthentcation yes，重启ssh服务，执行sudo service ssh restart。&#xA;win11设置端口转发 参照该链接&#xA;之后同一局域网的mac执行ssh -p 2222 zwyyy456@192.168.6.209，即可连接到wsl。</description>
    </item>
    <item>
      <title>配置 Sublime Text4为 C&#43;&#43; 编辑器</title>
      <link>http://localhost:1313/posts/blog/sublime_cpp.zh/</link>
      <pubDate>Mon, 06 Feb 2023 09:06:25 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/sublime_cpp.zh/</guid>
      <description>概述 涉及以下插件的安装和配置Package Control Terminus LSP LSP-clangd clang-format LSP-pyright LSP-json&#xA;配置sublime 安装Package Control以进行包管理。&#xA;Terminus 安装Terminus以实现sublime text4内的terminal。&#xA;绑定快捷键：&#xA;[ { &amp;#34;keys&amp;#34;: [ &amp;#34;ctrl+shift+t&amp;#34; ], &amp;#34;command&amp;#34;: &amp;#34;terminus_open&amp;#34;, &amp;#34;args&amp;#34;: { // 打开时要执行的命令 // &amp;#34;cmd&amp;#34;: &amp;#34;fish&amp;#34;, &amp;#34;cwd&amp;#34;: &amp;#34;${file_path:${folder}}&amp;#34; } } ] 自定义在Terminus的终端中编译运行cpp文件:&#xA;在Tools-&amp;gt;Build System-&amp;gt;New Build System中新建编译文件，保存为CppTerminus.sublime-build，替换内容为:&#xA;{ // MacOS &amp;#34;cmd&amp;#34;: [ &amp;#34;zsh&amp;#34;, &amp;#34;-c&amp;#34;, &amp;#34;clang++ &amp;#39;${file}&amp;#39; -std=c++17 -stdlib=libc++ -o &amp;#39;${file_path}/../bin/${file_base_name}&amp;#39; &amp;amp;&amp;amp; ${file_path}/../bin/${file_base_name}&amp;#34; ], &amp;#34;file_regex&amp;#34;: &amp;#34;^(..{FNXX==XXFN}*):([0-9]+):?([0-9]+)?:? (.*)$&amp;#34;, &amp;#34;working_dir&amp;#34;: &amp;#34;${file_path}&amp;#34;, &amp;#34;encoding&amp;#34;: &amp;#34;utf-8&amp;#34;, &amp;#34;selector&amp;#34;: &amp;#34;source.c, source.c++&amp;#34;, &amp;#34;variants&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;Run In Terminus&amp;#34;, &amp;#34;target&amp;#34;: &amp;#34;terminus_exec&amp;#34;, &amp;#34;cancel&amp;#34;: &amp;#34;terminus_cancel_build&amp;#34;, &amp;#34;cmd&amp;#34;: [ &amp;#34;zsh&amp;#34;, &amp;#34;-c&amp;#34;, &amp;#34;clang++ &amp;#39;${file}&amp;#39; -std=c++17 -stdlib=libc++ -o &amp;#39;${file_path}/.</description>
    </item>
    <item>
      <title>N1 Armbian</title>
      <link>http://localhost:1313/posts/blog/n1-armbian/</link>
      <pubDate>Fri, 09 Dec 2022 12:33:40 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/n1-armbian/</guid>
      <description></description>
    </item>
    <item>
      <title>N1 安装 Armbian 简单教程</title>
      <link>http://localhost:1313/posts/blog/n1-armbian.zh/</link>
      <pubDate>Fri, 09 Dec 2022 12:33:32 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/n1-armbian.zh/</guid>
      <description>前置 这一步非必须,如果之前 N1 已经刷了 OpenWrt 或者 Armbian 那么就不需要了,否则最好还是先刷入 webpad 的官改 V2.2 固件 解压后利用双公头 usb 线和 usb-burning-tool 刷入到 N1 中。&#xA;具体步骤如下：&#xA;usb-burning-tool 导入 webpad 2.2 线刷包，勾选 擦除 flash，取消勾选 擦除 bootloader； 点击 开始 按钮； 3 秒内让 N1 通电，识别成功自动开始刷入； 完成后拔电再上电，让 N1 重启； 当 N1 能正常开机之后，用鼠标开启 N1 的开发者模式（类似安卓手机，连续点击系统版本号即可）。&#xA;制作镜像 选择Armbian_23.02.0_amlogic_s905d_bullseye_6.0.11_server_2022.12.08.img.gz，下载好之后，解压，利用rufus刷入u盘。&#xA;安装 由于盒子在刷入armbian前为安卓系统，已开启adb，mac的终端执行adb connect 192.168.123.193连接无线adb，192.168.123.193修改成N1的实际的ip地址，然后执行adb reboot update(这些过程最好都在N1外接显示器的环境下进行)，在显示器黑屏的瞬间将前一步的u盘插入到靠近hdmi的usb接口;&#xA;接下来显示器会跑一系列starting xxx的服务，直到最后让login的时候，应该是要先输入用户名root，再输入1234(默认密码)，然后输入两次重复的自定义密码(如x12x12);&#xA;然后会让你创建用户，可以按Ctrl+C跳过;&#xA;当显示已经启动完成，让你再登录之后，输入用户名root和前一步的自定义密码x12x12，即可进入命令行，然后执行nand–sata-install命令将系统刷写进N1的emmc中。&#xA;新的 armbian 镜像的刷入命令改成了 armbian-install，见 github release 的说明&#xA;安装好后的配置 添加用户 执行 adduser zwyyy 创建用户并执行usermod -aG sudo username添加到sudo用户组，之后的命令都在zwyyy用户下执行;</description>
    </item>
    <item>
      <title>Vercel 部署 Hugo</title>
      <link>http://localhost:1313/posts/blog/vercel_scilence.zh/</link>
      <pubDate>Wed, 16 Nov 2022 16:46:59 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/vercel_scilence.zh/</guid>
      <description>让 Vercel 部署 GitHub 项目成功时，不再自动发送邮件通知 在github项目根目录下新建vercel.json，内容为:&#xA;{ &amp;#34;github&amp;#34;: { &amp;#34;silent&amp;#34;: true } } Vercel 环境变量设置 Vercel 默认的 Hugo 版本可能很低，需要通过环境变量指定 Hugo 版本，如下：</description>
    </item>
    <item>
      <title>Install debian bookworm</title>
      <link>http://localhost:1313/posts/blog/debian_testing/</link>
      <pubDate>Sat, 12 Nov 2022 09:58:28 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/debian_testing/</guid>
      <description></description>
    </item>
    <item>
      <title>安装 Debian bookworm</title>
      <link>http://localhost:1313/posts/blog/debian_testing.zh/</link>
      <pubDate>Sat, 12 Nov 2022 09:58:14 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/debian_testing.zh/</guid>
      <description>配置语言环境 我在安装debian的时候，有个地方选择了HK，因此使用locale命令查看当前的区域相关设置时，显示为: 其中:LANG为默认的区域设置，该变量的值会覆盖所有未设置的LC_*变量的值;&#xA;要修改为en_US，首先执行sudo dpkg-reconfigure locales，然后选中en_US.UTF-8，取消en_HK那个，取消inherit的那个，还可以选中zh_CN.UTF-8，这样就启用了en_US.UTF-8和zh_CN.UTF-8;&#xA;由于我的桌面环境为KDE PLasma，其语言设置会覆盖locale.conf的设置，执行vim ~/.config/plasma-localerc，修改该文件为:&#xA;[Formats] LANG=en_US.UTF-8 LC_ADDRESS=en_US.UTF-8 LC_MEASUREMENT=en_US.UTF-8 LC_MONETARY=en_US.UTF-8 LC_NAME=en_US.UTF-8 LC_NUMERIC=en_US.UTF-8 LC_TELEPHONE=en_US.UTF-8 LC_TIME=en_US.UTF-8 [Translations] LANGUAGE=en_US:C:zh_CN 其中LANGUAGE为备用语言，很多软件并未将其英文locale设置为en或en_US，而是使用默认locale C。如果在LANGUAGE中将非英文locale设置到English之后，例如LANGUAGE=en_US:en:es_ES，那么即使英语字符存在，应用程序可能会选择使用后备locale，解决方法是强制在英语locale后面设置C，例如 LANGUAGE=en_US:en:C:es_ES。&#xA;fcitx-rime 安装fcitx-rime sudo apt install fcitx-rime&#xA;安装小鹤双拼 sudo apt-get install librime-data-double-pinyin&#xA;将小鹤双拼官方网盘，3.1-挂接&amp;ndash;音形码，小鹤音形鼠须管for macos里的default.custom.yaml复制到~/.config/fcitx/rime，并修改为:&#xA;patch: menu: page_size: 8 schema_list: - schema: flypy # 添加小鹤音形 - schema: double_pinyin_flypy - schema: luna_pinyin_simp key_binder/bindings: - when: paging accept: bracketleft send: Page_Up - when: has_menu accept: bracketright send: Page_Down - when: has_menu accept: minus send: Page_Up - when: has_menu accept: equal send: Page_Down 启动fcitx，按Ctrl+Space切换为fcitx，Ctrl+`切换选择输入方案。</description>
    </item>
    <item>
      <title>基于 hugo 和 papermod 主题搭建自己的博客</title>
      <link>http://localhost:1313/posts/blog/create_blog_with_papermod.zh/</link>
      <pubDate>Fri, 04 Nov 2022 18:22:26 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/create_blog_with_papermod.zh/</guid>
      <description>部署博客到vercel FreeNom申请域名 首先，梯子最好选择美国的，并且freenom选择地址时最好与ip所在州可以对应得上； 进入FreeNom，输入zwyb.tk，然后点击检查可用性，这里要记得输入后缀，能避免点击现在获取显示不可用的问题。 如下图所示: Cloudfare管理域名 cloudfare添加站点zwyyy456.ml，然后添加DNS record，内容如下图所示： 下一步，进入freenom, Services-&amp;gt;My Domains-&amp;gt;Manage Domain-&amp;gt;Management Tools-&amp;gt;Nameservers，选择Use custom nameservers(enter blow)，填入cloudfare生成的nameservers。注意cloudfare的SSL/TLS策略必须是Full。&#xA;vercel部署博客和绑定域名 将整个项目，如papermod这个文件夹，作为一个git仓库上传到github，然后vercel创建新项目，选择continue with github，就能将对应的仓库导入到vercel，部署的时候注意添加Environment Variables&#xA;HUGO_VERSION 0.93.0 项目部署好之后，点击该项目，Settings-&amp;gt;Domains，添加之前FreeNom申请的域名，DNS record在上一步cloudfare管理域名那里已经添加过了。</description>
    </item>
    <item>
      <title>基于 Hugo 搭建自己的博客</title>
      <link>http://localhost:1313/posts/blog/create_blog_with_hugo.zh/</link>
      <pubDate>Fri, 04 Nov 2022 18:22:26 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/create_blog_with_hugo.zh/</guid>
      <description>前言 Hugo 是用 Go 语言写的静态网站生成器（Static Site Generator）。可以把 Markdown 文件转化成 HTML 文件，因此有很多人利用 Hugo 来搭建自己的博客网站。&#xA;安装 Hugo Mac 上，执行 brew install hugo，Win 上执行 scoop install hugo 即可。使用 hugo new site test-coder 即可创建博客，该命令会在当前目录创建一个名为 test-coder 的子目录，该目录就是创建的博客的源文件仓库。其中，test-coder 可以自行修改为你希望的名称。该目录中的内容如下：&#xA;test-coder on  main [+?] ❯ ls archetypes assets content data hugo.toml i18n layouts public resources static themes archetypes：存放 front matter 模板，hugo 命令创建 .md 文件时会根据该模板来创建； content：存放博客内容； layouts：存放定义为网站的样式，写在 layouts 目录下的样式文件会覆盖安装的主题中的 layouts 目录下的同名样式文件； static：存放静态文件，static 目录中的内容会在编译时会被移动到 public 目录，而本地的 public 目录对应着网站的根目录； public：存放 hugo 生成的静态网页； themes：存放主题文件； config.</description>
    </item>
    <item>
      <title>Vscdoe 通过cookie 登陆美区 LeetCode</title>
      <link>http://localhost:1313/posts/blog/vscode-leetcode-cookie.zh/</link>
      <pubDate>Tue, 27 Sep 2022 22:47:15 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/vscode-leetcode-cookie.zh/</guid>
      <description>安装插件 vscode 安装leetcode插件。&#xA;使用cookie登陆 如果选择使用github登陆leetcode.com，似乎会有无法提交和测试的bug，而用cookie登陆就没有这个问题&#xA;使用edge获取cookie 使用Firefox获取的cookie有问题，无法正常登陆&#xA;右键，选择检查 选择网络 打开leetcode的problem页面 下滑找到cookie那一栏，复制cookie </description>
    </item>
    <item>
      <title>为 papermod 主题添加 Latex 支持</title>
      <link>http://localhost:1313/posts/blog/latex_support_papermod.zh/</link>
      <pubDate>Mon, 26 Sep 2022 11:42:46 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/latex_support_papermod.zh/</guid>
      <description>steps to follow 在themes/PaperMod/layouts/partials目录下创建math.html文件，文件内容如下&#xA;&amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;https://cdn.jsdelivr.net/npm/katex@0.16.2/dist/katex.min.css&amp;#34; integrity=&amp;#34;sha384-bYdxxUwYipFNohQlHt0bjN/LCpueqWz13HufFEV1SUatKs1cm4L6fFgCi1jT643X&amp;#34; crossorigin=&amp;#34;anonymous&amp;#34;&amp;gt; &amp;lt;script defer src=&amp;#34;https://cdn.jsdelivr.net/npm/katex@0.16.2/dist/katex.min.js&amp;#34; integrity=&amp;#34;sha384-Qsn9KnoKISj6dI8g7p1HBlNpVx0I8p1SvlwOldgi3IorMle61nQy4zEahWYtljaz&amp;#34; crossorigin=&amp;#34;anonymous&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script defer src=&amp;#34;https://cdn.jsdelivr.net/npm/katex@0.16.2/dist/contrib/auto-render.min.js&amp;#34; integrity=&amp;#34;sha384-+VBxd3r6XgURycqtZ117nYw44OOcIax56Z4dCRWbxyPt0Koah1uHoK0o4+/RRE05&amp;#34; crossorigin=&amp;#34;anonymous&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; document.addEventListener(&amp;#34;DOMContentLoaded&amp;#34;, function() { renderMathInElement(document.body, { // customised options // • auto-render specific keys, e.g.: delimiters: [ {left: &amp;#39;$$&amp;#39;, right: &amp;#39;$$&amp;#39;, display: true}, {left: &amp;#39;$&amp;#39;, right: &amp;#39;$&amp;#39;, display: false}, {left: &amp;#39;\\(&amp;#39;, right: &amp;#39;\\)&amp;#39;, display: false}, {left: &amp;#39;\\[&amp;#39;, right: &amp;#39;\\]&amp;#39;, display: true} ], // • rendering keys, e.g.: throwOnError : false }); }); &amp;lt;/script&amp;gt; 编辑themes/PaperMod/layouts/partials目录下的extend_head.</description>
    </item>
    <item>
      <title>为 PaperMod 主题添加 LaTeX 支持</title>
      <link>http://localhost:1313/posts/blog/latex_support_papermod/</link>
      <pubDate>Mon, 26 Sep 2022 11:42:46 +0800</pubDate>
      <guid>http://localhost:1313/posts/blog/latex_support_papermod/</guid>
      <description>steps to follow 在themes/PaperMod/layouts/partials目录下创建math.html文件，文件内容如下&#xA;&amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;https://cdn.jsdelivr.net/npm/katex@0.16.2/dist/katex.min.css&amp;#34; integrity=&amp;#34;sha384-bYdxxUwYipFNohQlHt0bjN/LCpueqWz13HufFEV1SUatKs1cm4L6fFgCi1jT643X&amp;#34; crossorigin=&amp;#34;anonymous&amp;#34;&amp;gt; &amp;lt;script defer src=&amp;#34;https://cdn.jsdelivr.net/npm/katex@0.16.2/dist/katex.min.js&amp;#34; integrity=&amp;#34;sha384-Qsn9KnoKISj6dI8g7p1HBlNpVx0I8p1SvlwOldgi3IorMle61nQy4zEahWYtljaz&amp;#34; crossorigin=&amp;#34;anonymous&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script defer src=&amp;#34;https://cdn.jsdelivr.net/npm/katex@0.16.2/dist/contrib/auto-render.min.js&amp;#34; integrity=&amp;#34;sha384-+VBxd3r6XgURycqtZ117nYw44OOcIax56Z4dCRWbxyPt0Koah1uHoK0o4+/RRE05&amp;#34; crossorigin=&amp;#34;anonymous&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; document.addEventListener(&amp;#34;DOMContentLoaded&amp;#34;, function() { renderMathInElement(document.body, { // customised options // • auto-render specific keys, e.g.: delimiters: [ {left: &amp;#39;$$&amp;#39;, right: &amp;#39;$$&amp;#39;, display: true}, {left: &amp;#39;$&amp;#39;, right: &amp;#39;$&amp;#39;, display: false}, {left: &amp;#39;\\(&amp;#39;, right: &amp;#39;\\)&amp;#39;, display: false}, {left: &amp;#39;\\[&amp;#39;, right: &amp;#39;\\]&amp;#39;, display: true} ], // • rendering keys, e.g.: throwOnError : false }); }); &amp;lt;/script&amp;gt; 编辑themes/PaperMod/layouts/partials目录下的extend_head.</description>
    </item>
  </channel>
</rss>
